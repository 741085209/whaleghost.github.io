<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>for渲染与事件数据保留</title>
      <link href="/2024/03/18/%E5%89%8D%E7%AB%AF%E5%B0%8F%E7%BB%84%E7%AC%AC%E5%9B%9B%E6%AC%A1%E5%9F%B9%E8%AE%AD/"/>
      <url>/2024/03/18/%E5%89%8D%E7%AB%AF%E5%B0%8F%E7%BB%84%E7%AC%AC%E5%9B%9B%E6%AC%A1%E5%9F%B9%E8%AE%AD/</url>
      
        <content type="html"><![CDATA[<p>前端小组第四次培训2024&#x2F;3&#x2F;23</p><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul><li>了解针对数组的灵活渲染，for循环渲染</li><li>掌握对输入事件的处理，对输入数据进行保存</li><li>for循环渲染与输入事件配合，定位特定输入框</li></ul><h1 id="事件数据保留"><a href="#事件数据保留" class="headerlink" title="事件数据保留"></a>事件数据保留</h1><p>我们想要将输入框中输入的数据保留下来，则需对输入事件进行处理。</p><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 改变一下input组件的背景颜色，白色不好找 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">bindinput</span>=<span class="string">&quot;saveData&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: blueviolet;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;content&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">content</span>: <span class="string">&quot;nothing&quot;</span><span class="comment">//创建content，默认内容为nothing</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">saveData</span>: <span class="keyword">function</span>(<span class="params">e</span>) &#123;<span class="comment">//我们的输入事件被抽象为了e事件</span></span><br><span class="line">    <span class="comment">//console.log(this.data.content);如果不清楚我们输入的内容在何字段可先对e进行控制台打印</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;<span class="comment">//将输入内容赋值给data中的text，并通知渲染层发生了更改</span></span><br><span class="line">       <span class="attr">content</span>: e.<span class="property">detail</span>.<span class="property">value</span> </span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//this.data.content = e.detail.value;如果不需要在渲染层更新，直接复制即可</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="for循环渲染"><a href="#for循环渲染" class="headerlink" title="for循环渲染"></a>for循环渲染</h1><p>for循环渲染可以针对数组进行渲染，数组有多少元素，我们就渲染几个组件。</p><p>想要渲染哪个数组，就用插值表达式插入<code>wx:for=&quot;&quot;</code>中即可，索引<code>wx:key=&quot;&quot;</code>我们一般用下标index。</p><p>这里我们对<code>obj_arr</code>对象数组进行了for循环渲染。<code>obj_arr</code>数组中包含了两个元素，所以渲染出了两个<code>view</code>。</p><h2 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;obj_arr&#125;&#125;&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;item.xuefen&#125;&#125; &#123;&#123;item.chengji&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">obj_arr</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">xuefen</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">chengji</span>: <span class="number">80</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">xuefen</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="attr">chengji</span>: <span class="number">90</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="固定科目数量的for循环渲染与输入成绩保存"><a href="#固定科目数量的for循环渲染与输入成绩保存" class="headerlink" title="固定科目数量的for循环渲染与输入成绩保存"></a>固定科目数量的for循环渲染与输入成绩保存</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 渲染data中的subjects数组 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;subjects&#125;&#125;&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span>科目&#123;&#123;index+1&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;inputsth&quot;</span> <span class="attr">type</span>=<span class="string">&quot;digit&quot;</span> <span class="attr">bindinput</span>=<span class="string">&quot;saveXueFen&quot;</span> <span class="attr">data-index</span>=<span class="string">&quot;&#123;&#123;index&#125;&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;inputsth1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;digit&quot;</span> <span class="attr">bindinput</span>=<span class="string">&quot;saveFenShu&quot;</span> <span class="attr">data-index</span>=<span class="string">&quot;&#123;&#123;index&#125;&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bind:tap</span>=<span class="string">&quot;show&quot;</span>&gt;</span>点击输出subjects<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.cell</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;//每个cell元素将在底部余出<span class="number">10px</span>的空间</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.inputsth</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: aqua;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.inputsth1</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: bisque;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">subjects</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">xuefen</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">fenshu</span>: <span class="number">0</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">xuefen</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">fenshu</span>: <span class="number">0</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">xuefen</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">fenshu</span>: <span class="number">0</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">xuefen</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">fenshu</span>: <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">show</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">subjects</span>);<span class="comment">//控制台打印subjects数组</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">saveXueFen</span>: <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> i = e.<span class="property">currentTarget</span>.<span class="property">dataset</span>.<span class="property">index</span>;<span class="comment">//获取当前输入目标的下标</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">subjects</span>[i].<span class="property">xuefen</span> = e.<span class="property">detail</span>.<span class="property">value</span>;<span class="comment">//将subjects数组当前下标下的学分改为输入内容</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">saveFenShu</span>: <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> i = e.<span class="property">currentTarget</span>.<span class="property">dataset</span>.<span class="property">index</span>;<span class="comment">//获取当前输入目标的下标</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">subjects</span>[i].<span class="property">fenshu</span> = e.<span class="property">detail</span>.<span class="property">value</span>;<span class="comment">//将subjects数组当前下标下的分数改为输入内容</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 培训文件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OS Note</title>
      <link href="/2024/03/01/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9FNote/"/>
      <url>/2024/03/01/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9FNote/</url>
      
        <content type="html"><![CDATA[<h1 id="题录"><a href="#题录" class="headerlink" title="题录"></a>题录</h1><ul><li><p><a href="#q1">多道批处理系统下的多进程</a></p></li><li><p><a href="#q2">信号量集机制实现程序间的前趋关系</a></p></li><li><p><a href="#q3">P、V操作解决司机与售票员的同步问题</a></p></li><li><p><a href="#q4">信号量机制解决水果盘问题</a></p></li><li><p><a href="#q5">信号量机制解决过桥问题</a></p></li><li><p><a href="#q6">信号量机制解决信箱问题</a></p></li><li><p><a href="#q7">信号量机制解决理发师问题</a></p></li></ul><h1 id="引论"><a href="#引论" class="headerlink" title="引论"></a>引论</h1><h2 id="操作系统的目标"><a href="#操作系统的目标" class="headerlink" title="操作系统的目标"></a>操作系统的目标</h2><p><strong>方便性（<code>主要目标</code>）：</strong> <em>配置OS后的计算机可使用各种命令操纵计算机，以及编译命令编译源码生成机器代码，使其易用。</em></p><p><strong>有效性（<code>主要、首要目标</code>）：</strong></p><ol><li><em>OS提高了系统资源的利用率，如处理机、IO设备等。</em></li><li><em>OS提高了系统吞吐量，更好的组织计算机工作流程。</em></li></ol><p><strong>可扩充性：</strong> <em>体现为更方便的添加以及修改功能和模块。</em></p><p><strong>开放性：</strong> <em>遵循世界标准规范，提高兼容性，形成良好生态。</em></p><h2 id="操作系统的作用"><a href="#操作系统的作用" class="headerlink" title="操作系统的作用"></a>操作系统的作用</h2><p><strong>作为用户与计算机硬件系统之间的接口：</strong> <em>OS使用户可以通过命令方式、系统调用方式、GUI方式实现与系统的通信。</em></p><p><img src="https://s1.imagehub.cc/images/2024/03/01/29e42c7ef8814f099cfd359deb54f223.png" alt="29e42c7ef8814f099cfd359deb54f223.png"></p><p><strong>作为计算机系统资源的管理者：</strong> <em>OS管理着硬件资源（IO设备、存储器、处理机等）以及硬件资源的调度。</em></p><p><strong>实现了对计算机资源的抽象：</strong> <em>用户不必对物理接口有所了解，通过OS的I&#x2F;O软件实现数据输入输出功能，将物理接口抽象为OS模型。</em><img src="https://s1.imagehub.cc/images/2024/03/01/4bad19ff06a54a9380cd5f18c768f302.png" alt="4bad19ff06a54a9380cd5f18c768f302.png"></p><h2 id="推动操作系统发展的主要动力"><a href="#推动操作系统发展的主要动力" class="headerlink" title="推动操作系统发展的主要动力"></a>推动操作系统发展的主要动力</h2><p><strong>不断提高计算机资源利用率：</strong> <em>如批处理系统的出现</em></p><p><strong>方便用户：</strong> <em>如分时交互式系统的出现</em></p><p><strong>期间的不断更新迭代：</strong> <em>8位-  16 - 32 - 64 - …</em></p><p><strong>计算机体系结构的不断发展：</strong> <em>单处理机系统、多处理机系统、分布式系统、计算机网络</em></p><p><strong>不断提出新的应用需求（<code>根本动力</code>）</strong></p><h2 id="操作系统的发展过程"><a href="#操作系统的发展过程" class="headerlink" title="操作系统的发展过程"></a>操作系统的发展过程</h2><h3 id="未配置OS的计算机系统"><a href="#未配置OS的计算机系统" class="headerlink" title="未配置OS的计算机系统"></a>未配置OS的计算机系统</h3><h4 id="人工操作方式"><a href="#人工操作方式" class="headerlink" title="人工操作方式"></a>人工操作方式</h4><p><em>流程：<code>程序员按程序和数据对纸带打孔</code> -&gt; <code>纸带送入输入机</code> -&gt; <code>启动输入机传入计算机</code> -&gt; <code>启动计算机运行</code> -&gt; <code>完毕取走结果</code> -&gt; <code>下一用户</code></em></p><p>缺点：用户独占全机，CPU等待人工操作</p><h4 id="脱机输入-x2F-输出方式"><a href="#脱机输入-x2F-输出方式" class="headerlink" title="脱机输入&#x2F;输出方式"></a>脱机输入&#x2F;输出方式</h4><p><em>流程：<code>事先将纸带装入纸带输入机</code> -&gt; <code>外围机控制纸带上的数据(程序)输入到磁带</code> -&gt; <code>CPU需要时从磁带上高速地调入内存</code></em></p><p><img src="https://s1.imagehub.cc/images/2024/03/01/4f7fdce405f9632fe27da1ca451b5eaa.png" alt="4f7fdce405f9632fe27da1ca451b5eaa.png"></p><p>优点：</p><ol><li>减少了CPU空闲时间</li><li>提高了I&#x2F;O速度</li></ol><p>缺点：资源利用率仍然很低</p><h3 id="单道批处理系统"><a href="#单道批处理系统" class="headerlink" title="单道批处理系统"></a>单道批处理系统</h3><p><em>过程：</em></p><p><img src="https://s1.imagehub.cc/images/2024/03/01/0863b91935c5ef6a03a8efb1d3037a57.png" alt="0863b91935c5ef6a03a8efb1d3037a57.png"></p><p>优点：减少了人工操作的时间，提高机器的利用率和系统吞吐量。</p><p>缺点：资源利用率低；人机交互性差。</p><p><img src="https://s1.imagehub.cc/images/2024/03/01/f95208f0f387ec8994a10767fdecfe04.png" alt="f95208f0f387ec8994a10767fdecfe04.png"></p><h3 id="多道批处理系统"><a href="#多道批处理系统" class="headerlink" title="多道批处理系统"></a>多道批处理系统</h3><blockquote><p>宏观上并行</p><p>微观上串行</p></blockquote><p><em>流程：</em></p><p><img src="https://s1.imagehub.cc/images/2024/03/01/6c87c3851687266fe7f27eda3e2105db.png" alt="6c87c3851687266fe7f27eda3e2105db.png"></p><p>优点：</p><ol><li>硬件资源利用率高</li><li>系统吞吐量大</li></ol><p>缺点：</p><ol><li>平均周转时间长</li><li>交互性差</li></ol><hr><p><a name="q1">例题：</a></p><p><code>Q:</code> <em>设某计算机系统有一台输入机，一台打印机。现有两道程序同时投入运行，且程序A先开始运行，程序B后运行。程序A的运行轨迹为：计算50ms，打印信息100ms，再计算50ms，打印信息100ms，结束。程序B的运行轨迹为：计算50ms，输入数据80ms，再计算100ms，结束。</em></p><p><em>试说明:</em></p><ol><li><em>两道程序运行时，CPU有无空闲等待?若有，在哪段时间内等待?为什么?</em></li><li><em>程序A、B运行时有无等待?若有，在什么时候会发生等待?为什么?</em></li></ol><p><code>A:</code><img src="https://s1.imagehub.cc/images/2024/03/01/d40c15ff755742f6c38b5dc5ed3b65d8.jpeg" alt="d40c15ff755742f6c38b5dc5ed3b65d8.jpeg"></p><ol><li>有，在100-150ms范围等待，此时没有调用CPU的任务执行</li><li>A无，B有，B在0-50ms内因A占用CPU所以等待，在180-200ms内因A占用CPU所以等待。</li></ol><hr><h3 id="分时系统"><a href="#分时系统" class="headerlink" title="分时系统"></a>分时系统</h3><blockquote><p>支持多道且联机</p></blockquote><p><em>流程：</em></p><p><img src="https://s1.imagehub.cc/images/2024/03/01/572b47c773f2996de7fbcda3e2525fce.png" alt="572b47c773f2996de7fbcda3e2525fce.png"></p><p>特征：</p><ol><li><strong>多路性：</strong> <em>宏观上同时有多个用户在运行。</em></li><li><strong>独立性：</strong> <em>每个用户一个终端，独立操作，互不干扰</em></li><li><strong>及时性：</strong> <em>在很短时间内得到响应，小于2-3秒。</em></li><li><strong>交互性：</strong> <em>在终端上编辑、运行程序，或其它操作。</em></li></ol><hr><p>例题：</p><p><code>Q:</code> <em>在分时系统中，响应时间≈时间片×用户数，因此为改善响应时间，常用的原则是使时间片越小越好。</em></p><p><code>A:</code> 时间片不是越小越好，时间片越小，进程切换所用的开销就相对越大。</p><hr><h3 id="实时系统"><a href="#实时系统" class="headerlink" title="实时系统"></a>实时系统</h3><blockquote><p>可靠且时效性强</p></blockquote><p><em>应用：飞机火车订票系统、导弹制导系统、多媒体系统。</em></p><p>特征：</p><ol><li><strong>多路性</strong></li><li><strong>独立性</strong></li><li><strong>及时性</strong></li><li><strong>交互性</strong></li><li><strong>可靠性</strong></li></ol><h2 id="操作系统的基本特征"><a href="#操作系统的基本特征" class="headerlink" title="操作系统的基本特征"></a>操作系统的基本特征</h2><h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><p><em>计算机系统中同时存在多道运行的进程。</em></p><p>宏观上：多道进程同时执行</p><p>微观上：任何时刻仅有一道进程执行，只是基于时间片进行<strong>高频的进程切换</strong></p><p><em>区分：并行使指多道程序在同一时刻执行，但需多个硬件支持</em></p><h3 id="共享"><a href="#共享" class="headerlink" title="共享"></a>共享</h3><p><em>系统中的资源不再为某道程序所独占，而是供多道程序共同使用。</em></p><p>共享方式：</p><ul><li><strong>互斥共享：</strong> <em>在规定时间内仅允许单一进程访问指定资源，其他进程等待。</em></li><li><strong>同时共享：</strong> <ul><li><strong>宏观：</strong> <em>在规定时间内允许多个进程访问指定资源。</em></li><li><strong>微观：</strong> <em>多个进程交替访问该资源。</em></li></ul></li></ul><h3 id="虚拟"><a href="#虚拟" class="headerlink" title="虚拟"></a>虚拟</h3><p><em>将一物理实体通过分时或分空间映射为若干对应逻辑实体。</em></p><ul><li><p><em>时分复用：为每个程序建立进程，微观上多个进程交替执行，宏观上表现为一个物理处理器同时为多个用户程序服务。一台I&#x2F;O设备分为多台逻辑上的I&#x2F;O设备为多个用户服务，宏观上允许用户同时访问该设备，微观上交替为用户服务。</em></p></li><li><p><em>空分复用：将程序最需要执行的部分调入内存，执行完毕后换出，换入另一部分执行。</em></p></li></ul><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><p><em>进程在执行中，其执行时间、顺序、向前推进的速度和完成的时间等都是不可预知的。</em></p><h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><h2 id="进程的构成"><a href="#进程的构成" class="headerlink" title="进程的构成"></a>进程的构成</h2><p>PCB+程序段+相关数据段</p><blockquote><p>程序与进程区别：</p><p>程序是<code>静态</code>的，它以文件的形式存储在磁盘上。</p><p>进程是<code>动态</code>的，加载到内存上，是程序的一次动态执行过程。</p></blockquote><h2 id="进程的状态和转换"><a href="#进程的状态和转换" class="headerlink" title="进程的状态和转换"></a>进程的状态和转换</h2><h3 id="就绪态"><a href="#就绪态" class="headerlink" title="就绪态"></a>就绪态</h3><p>进程创建完成后进入就绪状态，就绪状态的进程已经具备运行的条件，只是此时CPU没有运行这个进程。</p><h3 id="运行态"><a href="#运行态" class="headerlink" title="运行态"></a>运行态</h3><p>进程在CPU运行。</p><h3 id="阻塞态"><a href="#阻塞态" class="headerlink" title="阻塞态"></a>阻塞态</h3><p>进程在运行过程中可能申请资源，这个资源可能正在被使用，此时CPU会让这个进程进入阻塞状态。</p><p>如果当资源就绪时，此时这个进程就会从阻塞状态变成就绪状态等待CPU调度</p><h3 id="创建态"><a href="#创建态" class="headerlink" title="创建态"></a>创建态</h3><p>进程正在被创建时，被称为“创建态”，包括分配资源、初始化PCB。</p><h3 id="终止态"><a href="#终止态" class="headerlink" title="终止态"></a>终止态</h3><p>进程运行结束后，会执行exit系统调用结束进程，此时进程的状态为终止状态，申请的系统资源和PCB被回收。</p><hr><h3 id="状态转换"><a href="#状态转换" class="headerlink" title="状态转换"></a>状态转换</h3><p><img src="https://s1.imagehub.cc/images/2024/03/21/f684080f9b8c8dc4106c805d48c14128.png" alt="f684080f9b8c8dc4106c805d48c14128.png"></p><h2 id="进程控制块（PCB）"><a href="#进程控制块（PCB）" class="headerlink" title="进程控制块（PCB）"></a>进程控制块（PCB）</h2><blockquote><p>PCB是进程存在的<code>唯一</code>标志</p></blockquote><p>PCB是OS对并发执行的进程进行控制和管理的根据。</p><h3 id="PCB的组织方式"><a href="#PCB的组织方式" class="headerlink" title="PCB的组织方式"></a>PCB的组织方式</h3><h4 id="线性方式"><a href="#线性方式" class="headerlink" title="线性方式"></a>线性方式</h4><p>每次查找都要扫整张表</p><p><img src="https://s1.imagehub.cc/images/2024/03/21/e1bb3cfa166e438af70369e4e6539361.png" alt="e1bb3cfa166e438af70369e4e6539361.png"></p><h4 id="链接方式（常见）"><a href="#链接方式（常见）" class="headerlink" title="链接方式（常见）"></a>链接方式（常见）</h4><p><img src="https://s1.imagehub.cc/images/2024/03/21/5b81fd128356dbd034e3cf135bf01bb4.png" alt="5b81fd128356dbd034e3cf135bf01bb4.png"></p><h4 id="索引方式（少见）"><a href="#索引方式（少见）" class="headerlink" title="索引方式（少见）"></a>索引方式（少见）</h4><p><img src="https://s1.imagehub.cc/images/2024/03/21/044cc170a43781251362231649ae991a.png" alt="044cc170a43781251362231649ae991a.png"></p><h2 id="处理机的执行状态"><a href="#处理机的执行状态" class="headerlink" title="处理机的执行状态"></a><em>处理机的执行状态</em></h2><table><thead><tr><th>处理机状态</th><th>访问权限</th><th>程序</th></tr></thead><tbody><tr><td>系统态（核心态、管态）</td><td>一切指令，所有R及存储区</td><td>OS内核</td></tr><tr><td>用户态（目态）</td><td>规定指令，指定R及存储区</td><td>用户程序</td></tr></tbody></table><h2 id="原语"><a href="#原语" class="headerlink" title="原语"></a><em>原语</em></h2><p>OS内核中由若干条指令构成的用于完成特定功能的“原子操作”过程，作为一个整体且<code>不可分割</code>—要么全部都完成，要么全部都不做。许多系统调用就是原语。</p><h1 id="进程同步"><a href="#进程同步" class="headerlink" title="进程同步"></a>进程同步</h1><h2 id="临界资源"><a href="#临界资源" class="headerlink" title="临界资源"></a>临界资源</h2><p>系统中某些资源一次只允许一个进程使用，称这样的资源为临界资源或互斥资源或共享变量。</p><h2 id="临界区"><a href="#临界区" class="headerlink" title="临界区"></a>临界区</h2><p>在进程中涉及到临界资源的程序段叫临界区。</p><h2 id="同步机制规则"><a href="#同步机制规则" class="headerlink" title="同步机制规则"></a>同步机制规则</h2><p><code>有空让进</code>：<em>无进程在临界区时，要求进入临界区的进程可进入。</em></p><p><code>忙则等待</code>：<em>不允许两个以上的进程同时进入临界区（互斥访问）。</em></p><p><code>有限等待</code>：<em>要求进入临界区的进程不能无限等待，以免陷入“死等（饥饿）”。</em></p><p><code>让权等待</code>：<em>当进程不能进入自己的临界区时，应立即释放处理机，以免进程陷入“忙等”。</em></p><h2 id="信号量机制"><a href="#信号量机制" class="headerlink" title="信号量机制"></a>信号量机制</h2><h3 id="整型信号量"><a href="#整型信号量" class="headerlink" title="整型信号量"></a>整型信号量</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> S;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">wait</span><span class="params">(S)</span> &#123;<span class="comment">//P(S)</span></span><br><span class="line">    <span class="keyword">while</span> (S &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        S--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">signal</span><span class="params">(S)</span> &#123;<span class="comment">//V(S)</span></span><br><span class="line">    S++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>缺陷：</strong>只要<code>S &lt;= 0</code>，wait操作就不断地测试(忙等)，因而，未做到“让权等待”。</p><h3 id="记录型信号量"><a href="#记录型信号量" class="headerlink" title="记录型信号量"></a>记录型信号量</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">process_control_block</span>* <span class="title">list</span>;</span></span><br><span class="line">&#125; semaphore;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">wait</span><span class="params">(semaphore* S)</span> &#123;<span class="comment">//P(S)申请一个资源</span></span><br><span class="line">    S-&gt;value--;</span><br><span class="line">    <span class="keyword">if</span> (S-&gt;value &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        block(S-&gt;<span class="built_in">list</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">signal</span><span class="params">(semaphore* S)</span> &#123;<span class="comment">//V(S)释放一个资源</span></span><br><span class="line">    S-&gt;value++;</span><br><span class="line">    <span class="keyword">if</span> (S-&gt;value &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        wakeup(S-&gt;<span class="built_in">list</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>S-&gt;value &gt; 0</code>表<code>value</code>个资源可用</p><p><code>S-&gt;value == 0</code>表无资源可用且无进程等待该资源</p><p><code>S-&gt;value &lt; 0</code>表<code>|value|</code>个进程正在等待该资源</p><h3 id="AND型信号量"><a href="#AND型信号量" class="headerlink" title="AND型信号量"></a>AND型信号量</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Pseudocode</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Swait</span><span class="params">(S1, S2, ..., Sn)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (S1 &gt;= <span class="number">1</span> &amp;&amp; ... &amp;&amp; Sn &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">                Si--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//place the process in the waiting queue associated with the first Si found with Si &lt; 1, and set the program count of this process to the beginning of Swait operation</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> Ssignal(S1, S2, ..., Sn) &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            S++;</span><br><span class="line">            <span class="comment">//remove all the process waiting in the queue associated with Si into the ready queue</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><a name="q2">例题：</a></p><p><code>Q:</code><em>请用信号量集机制实现下图程序之间的前趋关系：</em></p><p><img src="https://s1.imagehub.cc/images/2024/03/22/2a4a51acac1cab1c19098dc6dab5d6c3.jpeg" alt="2a4a51acac1cab1c19098dc6dab5d6c3.jpeg"></p><p><code>A:</code></p><p><img src="https://s1.imagehub.cc/images/2024/03/22/6f390a2001bbd8a1ec5e411f6247a348.jpeg" alt="6f390a2001bbd8a1ec5e411f6247a348.jpeg"></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Pseudocode</span></span><br><span class="line">semaphore a = b = c = d = e = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">p1() &#123;p1; signal(a); signal(b);&#125;</span><br><span class="line"></span><br><span class="line">p2() &#123;p2; signal(c);&#125;</span><br><span class="line"></span><br><span class="line">p3() &#123;wait(a); p3; signal(d);&#125;</span><br><span class="line"></span><br><span class="line">p4() &#123;wait(b); p4; signal(e);&#125;</span><br><span class="line"></span><br><span class="line">p5() &#123;wait(c); wait(d); wait(e); p5;&#125;</span><br></pre></td></tr></table></figure><hr><p><a name="q3">例题：</a></p><p><code>Q:</code></p><ul><li><em>售票员的操作规则：只有司机停车后，售票员才能开门让乘客下车。</em></li><li><em>司机的操作规则：只有售票员关门后，司机才能启动开始行驶汽车。</em></li></ul><p><code>A:</code></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">semaphore close = <span class="number">0</span>, stop = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">driver</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        P(close);</span><br><span class="line">        <span class="comment">//启动车辆-&gt;正常行驶-&gt;到站停车</span></span><br><span class="line">        V(stop);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">busman</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">//关门</span></span><br><span class="line">        V(close);</span><br><span class="line">        <span class="comment">//售票</span></span><br><span class="line">        P(stop);</span><br><span class="line">        <span class="comment">//开门-&gt;上下乘客</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><a name="q4">例题：</a></p><p><code>Q:</code><em>假设桌子上有一个盘子，可以放一个水果。父亲总是放苹果到盘子中，而母亲则总是放香蕉到盘子中；一个儿子专等吃盘中的香蕉，一个女儿专等吃盘中的苹果。请P、V操作实现上述问题。</em></p><p><code>A:</code></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">semaphore empty = <span class="number">1</span>, apple = <span class="number">0</span>, banana = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">father</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        P(empty);</span><br><span class="line">        V(apple);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">mother</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        P(empty);</span><br><span class="line">        V(banana);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">son</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        P(banana);</span><br><span class="line">        V(empty);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">daughter</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        P(apple);</span><br><span class="line">        V(empty);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><a name="q5">例题：</a></p><p><code>Q:</code><em>有交通桥如图所示，车流方向如图中箭头所示。</em></p><p><img src="https://s1.imagehub.cc/images/2024/03/22/d58d9aec043f2e4debfb111fdbd843d5.jpeg" alt="d58d9aec043f2e4debfb111fdbd843d5.jpeg"></p><p><em>问题如下：</em></p><p><em>（1）假设桥上每次只能有一辆车行驶，试用信号量的P、V操作实现交通管理。</em></p><p><em>（2）假设桥上不允许有两个不同方向的车同时行驶，但允许有多个同方向依次行驶通过。试用信号量的P、V操作实现桥上的交通管理。</em></p><p><code>A:</code></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> countA = <span class="number">0</span>, countB = <span class="number">0</span>;</span><br><span class="line">semaphore bridge = <span class="number">1</span>, mutexA = <span class="number">1</span>, mutexB = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PA</span><span class="params">()</span> &#123;</span><br><span class="line">    P(mutexA);</span><br><span class="line">    <span class="keyword">if</span> (countA == <span class="number">0</span>) &#123;</span><br><span class="line">        P(bridge);</span><br><span class="line">    &#125;</span><br><span class="line">    countA++;</span><br><span class="line">    V(mutexA);</span><br><span class="line">    pass();</span><br><span class="line">    P(mutexA);</span><br><span class="line">    countA--;</span><br><span class="line">    <span class="keyword">if</span> (countA == <span class="number">0</span>) &#123;</span><br><span class="line">        V(bridge);</span><br><span class="line">    &#125;</span><br><span class="line">    V(mutexA);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PB</span><span class="params">()</span> &#123;</span><br><span class="line">    P(mutexB);</span><br><span class="line">    <span class="keyword">if</span> (countB == <span class="number">0</span>) &#123;</span><br><span class="line">        P(bridge);</span><br><span class="line">    &#125;</span><br><span class="line">    countB++;</span><br><span class="line">    V(mutexB);</span><br><span class="line">    pass();</span><br><span class="line">    P(mutexB);</span><br><span class="line">    countA--;</span><br><span class="line">    <span class="keyword">if</span> (countB == <span class="number">0</span>) &#123;</span><br><span class="line">        V(bridge);</span><br><span class="line">    &#125;</span><br><span class="line">    V(mutexB);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><a name="q6">例题：</a></p><p><code>Q:</code><em>有A、B 两人通过信箱进行辩论，每人都从自己的信箱中取得对方的问题。将答案和向对方提出的新问题组成一个邮件放入对方的邮箱中，设A的信箱最多放M个邮件，B的信箱最多放N个邮件。初始时A的信箱中有x个邮件（0&lt;x&lt;y&lt;n）。辩论者每取出一个邮件，邮件数减1。A、B 两人操作过程：</em></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Pseudocode</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">A</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        从A的信箱中取出一个邮件</span></span><br><span class="line"><span class="comment">        回答问题并提出一个新问题</span></span><br><span class="line"><span class="comment">        将新邮件放入B的信箱</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">B</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        从B的信箱中取出一个邮件</span></span><br><span class="line"><span class="comment">        回答问题并提出一个新问题</span></span><br><span class="line"><span class="comment">        将新邮件放入A的信箱</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>当信箱不为空时，辩论者才能从信箱中取邮件，否则等待。</em></p><p><em>当信箱不满时，辩论者才能将新邮件放入信箱，否则等待。</em></p><p><em>请添加必要的信号量和P、V（或wait, signal）操作，以实现上述过程的</em></p><p><em>同步，要求写出完整过程，并说明信号量的含义和初值。</em></p><p><code>A:</code></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">semaphore mutexA = <span class="number">1</span>, mutexB = <span class="number">1</span>, emptyA = M - x, fullA = x, emptyB = N, fullB = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">A</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        P(fullA);</span><br><span class="line">        P(mutexA);</span><br><span class="line">        <span class="comment">//从A信箱中取出一个邮件</span></span><br><span class="line">        V(mutexA);</span><br><span class="line">        V(emptyA);</span><br><span class="line">        <span class="comment">//回答问题并提出一个新问题</span></span><br><span class="line">        P(emptyB);</span><br><span class="line">        P(mutexB);</span><br><span class="line">        <span class="comment">//将新邮件放入B信箱</span></span><br><span class="line">        V(mutexB);</span><br><span class="line">        V(fullB);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">B</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        P(fullB);</span><br><span class="line">        P(mutexB);</span><br><span class="line">        <span class="comment">//从B信箱中取出一个邮件</span></span><br><span class="line">        V(mutexB);</span><br><span class="line">        V(emptyB);</span><br><span class="line">        <span class="comment">//回答问题并提出一个新问题</span></span><br><span class="line">        P(emptyA);</span><br><span class="line">        P(mutexA);</span><br><span class="line">        <span class="comment">//将新邮件放入A信箱</span></span><br><span class="line">        V(mutexA);</span><br><span class="line">        V(fullA);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><a name="q7">例题：</a></p><p><code>Q:</code><em>理发店里有一位理发师、一把理发椅和 N 把供等候理发的顾客坐的椅子。</em></p><p><em>如果没有顾客，理发师便在理发椅上睡觉，顾客到来时被叫醒。</em></p><p><em>如果顾客来时理发师正在理发，则顾客找空椅子，坐下来等待。没有空椅子顾客就离开。</em></p><p><em>如何用信号量解决理发师问题？</em></p><p><code>A:</code></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">semaphore mutex = <span class="number">1</span>, empty = N, full = <span class="number">0</span>;</span><br><span class="line">Customer* customers = <span class="keyword">new</span> Customer[N];</span><br><span class="line"><span class="type">int</span> head = <span class="number">0</span>, tail = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Tony</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="built_in">P</span>(full);</span><br><span class="line">        <span class="built_in">P</span>(mutex);</span><br><span class="line">        Customer customer = customers[head];</span><br><span class="line">        head = (head + <span class="number">1</span>) % N;</span><br><span class="line">        <span class="built_in">V</span>(mutex);</span><br><span class="line">        <span class="built_in">V</span>(empty);</span><br><span class="line">        <span class="built_in">hairCut</span>(customer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Customer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (empty &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="built_in">P</span>(empty);</span><br><span class="line">        <span class="built_in">P</span>(mutex);</span><br><span class="line">        customers[tail] = *<span class="keyword">this</span>;</span><br><span class="line">        tail = (tail + <span class="number">1</span>) % N;</span><br><span class="line">        <span class="built_in">V</span>(mutex);</span><br><span class="line">        <span class="built_in">V</span>(full);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="调度"><a href="#调度" class="headerlink" title="调度"></a>调度</h1><h2 id="调度层次"><a href="#调度层次" class="headerlink" title="调度层次"></a>调度层次</h2><p><strong>调度频率</strong>：低级调度 &gt; 中级调度 &gt; 高级调度</p><h3 id="高级-x2F-长程调度"><a href="#高级-x2F-长程调度" class="headerlink" title="高级&#x2F;长程调度"></a>高级&#x2F;长程调度</h3><p><strong>主要任务</strong>：将外存上处于后备队列的作业调入内存，并创建进程，分配资源，放入就绪队列。<br><em>分时和实时系统中不设高级调度。</em></p><h3 id="中级调度"><a href="#中级调度" class="headerlink" title="中级调度"></a>中级调度</h3><h3 id="低级-x2F-短程调度（最基本）"><a href="#低级-x2F-短程调度（最基本）" class="headerlink" title="低级&#x2F;短程调度（最基本）"></a>低级&#x2F;短程调度（最基本）</h3><p><strong>主要任务</strong>：从就绪队列中选择一个进程分配处理机。</p><h3 id="调度模型"><a href="#调度模型" class="headerlink" title="调度模型"></a>调度模型</h3><p><img src="/"></p><h2 id="调度方式-x2F-算法的准则"><a href="#调度方式-x2F-算法的准则" class="headerlink" title="调度方式&#x2F;算法的准则"></a>调度方式&#x2F;算法的准则</h2><h3 id="面向用户"><a href="#面向用户" class="headerlink" title="面向用户"></a>面向用户</h3><ol><li>周转时间短</li><li>响应时间快</li><li>截止时间保证</li><li>优先权</li></ol><h3 id="面向系统"><a href="#面向系统" class="headerlink" title="面向系统"></a>面向系统</h3><ol><li>系统吞吐量</li><li>处理机利用率高</li><li>资源平衡利用</li></ol><h2 id="FCFS-first-come-first-served"><a href="#FCFS-first-come-first-served" class="headerlink" title="FCFS(first-come first-served)"></a>FCFS(first-come first-served)</h2>]]></content>
      
      
      <categories>
          
          <category> 部长自用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++实现简单json解析</title>
      <link href="/2024/02/08/C-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0json%E8%A7%A3%E6%9E%90/"/>
      <url>/2024/02/08/C-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0json%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="问题复现"><a href="#问题复现" class="headerlink" title="问题复现"></a>问题复现</h1><p>请求到的json中字段中有冗余字段，是无用信息，在用C++进行解析时，将其转变为<code>unordered_map&lt;string, string&gt;</code>可较完美且符合人类逻辑的进行json字符串的解析，并可对特定字段进行剔除，不过由于C++是强类型，静态的语言，暂未想到有比用<code>string</code>字面量表示所有数据类型更完美的方案。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="导入json文件"><a href="#导入json文件" class="headerlink" title="导入json文件"></a>导入json文件</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"><span class="keyword">using</span> std::ifstream;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">readFile</span><span class="params">(ifstream&amp; buffer, <span class="type">size_t</span> reserve_size = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">    string json;</span><br><span class="line">    <span class="keyword">if</span> (reserve_size) &#123;<span class="comment">//预留足够空间来避免多次扩容引起的性能问题</span></span><br><span class="line">        json.<span class="built_in">reserve</span>(reserve_size);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (buffer.<span class="built_in">is_open</span>()) &#123;<span class="comment">//文件是否打开</span></span><br><span class="line">        string line;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">getline</span>(buffer, line)) &#123;</span><br><span class="line">            line.<span class="built_in">append</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            json.<span class="built_in">append</span>(line);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> json;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解析json"><a href="#解析json" class="headerlink" title="解析json"></a>解析json</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::unordered_map;</span><br><span class="line"></span><br><span class="line"><span class="function">unordered_map&lt;string, string&gt; <span class="title">parseJson</span><span class="params">(<span class="type">const</span> string&amp; s)</span> </span>&#123;</span><br><span class="line">    unordered_map&lt;string, string&gt; json;</span><br><span class="line">    <span class="keyword">auto</span> it = s.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">while</span> (*it != <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">        it++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (*it != <span class="string">&#x27;&#125;&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (*it != <span class="string">&#x27;\&quot;&#x27;</span>) &#123;</span><br><span class="line">            it++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> key_begin = ++it;</span><br><span class="line">        <span class="keyword">while</span> (*it != <span class="string">&#x27;\&quot;&#x27;</span>) &#123;</span><br><span class="line">            it++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> key_end = it++;</span><br><span class="line">        <span class="function">string <span class="title">key</span><span class="params">(key_begin, key_end)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (*it != <span class="string">&#x27;:&#x27;</span>) &#123;</span><br><span class="line">            it++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (*it != <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">            it++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> value_begin = ++it;</span><br><span class="line">        <span class="keyword">while</span> (*it != <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">            it++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> value_end = it++<span class="number">-1</span>;</span><br><span class="line">        <span class="function">string <span class="title">value</span><span class="params">(value_begin, value_end)</span></span>;</span><br><span class="line"></span><br><span class="line">        json[key] = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> json;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="main"><a href="#main" class="headerlink" title="main"></a>main</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">std::ifstream <span class="title">buffer</span><span class="params">(<span class="string">R&quot;(../../..)&quot;</span>)</span></span>;<span class="comment">//json文件路径</span></span><br><span class="line">    <span class="function">std::string <span class="title">s</span><span class="params">(readFile(buffer, <span class="number">40000</span>))</span></span>;</span><br><span class="line">    std::unordered_map&lt;string, string&gt; json = <span class="built_in">parseJson</span>(s);</span><br><span class="line">    buffer.<span class="built_in">close</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; it : json) &#123;</span><br><span class="line">        std::cout &lt;&lt; it.first &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; it.second &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 部长自用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ STL Container</title>
      <link href="/2023/12/01/C-STL-Container/"/>
      <url>/2023/12/01/C-STL-Container/</url>
      
        <content type="html"><![CDATA[<h1 id="string"><a href="#string" class="headerlink" title="string"></a>string</h1><p>C++11后（包括）使用<code>std::string</code>不再需要包含头文件，<code>#include &lt;string&gt;</code>。</p><p>string是字符容器，内部维护一个动态字符数组。功能强大，自动分配内存与释放，但效率略低，占用资源略多。</p><h2 id="NBTS-null-terminated-string"><a href="#NBTS-null-terminated-string" class="headerlink" title="NBTS(null-terminated string)"></a>NBTS(null-terminated string)</h2><p>C语言风格字符串，即以0(<code>&#39;\0&#39;</code>)为结束的字符串。而string容器没有此特点。</p><h2 id="string-npos"><a href="#string-npos" class="headerlink" title="string::npos"></a>string::npos</h2><p>静态常量成员<code>string::npos</code>为string所能容纳的最大长度，通常是<code>unsigned long long</code>的最大值，18446744073709551615。</p><h2 id="Constructor"><a href="#Constructor" class="headerlink" title="Constructor"></a><a name="cons">Constructor</a></h2><table><thead><tr><th align="center">函数原型</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">string();</td><td align="center">创建一个长度为0的string容器</td></tr><tr><td align="center">string(const char* s);</td><td align="center">依据s指向的NBTS构造string容器</td></tr><tr><td align="center">string(const string&amp; str, size_t pos &#x3D; 0, size_t n &#x3D; npos);</td><td align="center">依据str对象深拷贝构造string容器，或从pos下标开始长度为n构造string容器</td></tr><tr><td align="center">template&lt;class InputIterator&gt; string(InputIterator first,InputIterator last);</td><td align="center">将string对象初始化为区间[first,last]内的字符，其中begin和end是迭代器，其行为就像指针，用于指定位置。</td></tr><tr><td align="center">string(const char* s, size_t n);</td><td align="center">依据s指向的NBTS的前n个字符构造string容器，即使超过了NBTS结尾</td></tr><tr><td align="center">string(size_t n, char c);</td><td align="center">以n个c字符构造string容器</td></tr></tbody></table><h2 id="容量大小操作"><a href="#容量大小操作" class="headerlink" title="容量大小操作"></a>容量大小操作</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">size_t</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//capacity &gt;= size == length</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">函数原型</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">size_t capacity() const;</td><td align="center">返回容器当前容量</td></tr><tr><td align="center">size_t size() const;</td><td align="center">返回当前容器字符串长度</td></tr><tr><td align="center">size_t length() const;</td><td align="center">返回当前容器字符串长度</td></tr><tr><td align="center">bool empty() const;</td><td align="center">判断容器是否为空</td></tr><tr><td align="center">void clear();</td><td align="center">清空容器</td></tr><tr><td align="center">void resize(size_t length, char c &#x3D; 0);</td><td align="center">把容器实际大小设为legnth，若减小，则截断多余部分，若增大，则用字符c填充</td></tr></tbody></table><h2 id="内容操作"><a href="#内容操作" class="headerlink" title="内容操作"></a>内容操作</h2><table><thead><tr><th align="center">函数原型</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">char&amp; operator[](int n);</td><td align="center">返回容器的第n个元素</td></tr><tr><td align="center">char&amp; at(int n);</td><td align="center">返回容器的第n个元素，越界时抛出out_of_range异常</td></tr><tr><td align="center">const char* c_str() const;</td><td align="center">以只读NBTS形式返回容器中元素首地址</td></tr><tr><td align="center">const char* data() const;</td><td align="center">返回容器中元素首地址</td></tr></tbody></table><h2 id="赋值操作"><a href="#赋值操作" class="headerlink" title="赋值操作"></a>赋值操作</h2><p>作用参考string容器的<a href="#cons">构造函数</a>。</p><table><thead><tr><th align="center">函数原型</th></tr></thead><tbody><tr><td align="center">string&amp; operator&#x3D;(const char* s);</td></tr><tr><td align="center">string&amp; operator&#x3D;(const string&amp;s);</td></tr><tr><td align="center">string&amp; operator&#x3D;(char c);</td></tr><tr><td align="center">string&amp; assign(const char* s);</td></tr><tr><td align="center">string &amp;assign(const char* s, size_t n);</td></tr><tr><td align="center">string&amp; assign(const string&amp; str);</td></tr><tr><td align="center">string&amp; assign(size_t n, char c);</td></tr><tr><td align="center">string&amp; assign(const string&amp; str, size_t pos &#x3D; 0, size_t n &#x3D; npos);</td></tr><tr><td align="center">template&lt;class InputIterator&gt; string&amp; assign(InputIterator first,InputIterator last);</td></tr></tbody></table><h2 id="拼接操作"><a href="#拼接操作" class="headerlink" title="拼接操作"></a>拼接操作</h2><table><thead><tr><th align="center">函数原型</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">string&amp; operator+&#x3D;(const string&amp; str);</td><td align="center">重载+&#x3D;操作符，将string对象str连接到当前string对象后</td></tr><tr><td align="center">string&amp; operator+&#x3D;(const char* s);</td><td align="center">重载+&#x3D;操作符，将C风格字符串s连接到当前string对象后</td></tr><tr><td align="center">string&amp; operator+&#x3D;(const char c);</td><td align="center">重载+&#x3D;操作符，将字符c连接到当前string对象后</td></tr><tr><td align="center">string&amp; append(const char *s);</td><td align="center">把C语言风格字符串s连接到当前string对象结尾</td></tr><tr><td align="center">string &amp;append(const char *s, size_t n);</td><td align="center">把C语言风格字符串s的前n个字符连接到当前string对象结尾</td></tr><tr><td align="center">string&amp; append(const string&amp;str);</td><td align="center">将string对象str连接到当前string对象后</td></tr><tr><td align="center">string&amp; append(const string&amp; s, int pos, int n);</td><td align="center">把string对象s中从pos开始的n个字符连接到当前string对象结尾</td></tr><tr><td align="center">string &amp;append(size_t n, char c);</td><td align="center">在当前string容器结尾添加n个字符c</td></tr></tbody></table><h2 id="交换操作"><a href="#交换操作" class="headerlink" title="交换操作"></a>交换操作</h2><table><thead><tr><th align="center">函数原型</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">void swap(string&amp; str);</td><td align="center">把当前容器与str交换</td></tr></tbody></table><p>如果数据量很小，交换的是容器中的内容，如果数据量比较大，交换的是动态数组的地址。</p><h2 id="截取操作"><a href="#截取操作" class="headerlink" title="截取操作"></a>截取操作</h2><table><thead><tr><th align="center">函数原型</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">string substr(size_t pos &#x3D; 0, size_t n &#x3D; npos) const;</td><td align="center">返回pos开始的n个字符组成的子容器</td></tr></tbody></table><h2 id="比较操作"><a href="#比较操作" class="headerlink" title="比较操作"></a>比较操作</h2><p>compare函数比较的依据为字典顺序，在&gt;时返回 1，&lt;时返回 -1，&#x3D;&#x3D;时返回 0。</p><table><thead><tr><th align="center">函数原型</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">&#x3D;&#x3D;, &gt;, &lt;, &gt;&#x3D;, &lt;&#x3D;</td><td align="center">两string容器内容按字典顺序比较</td></tr><tr><td align="center">int compare(size_t pos, size_t n, const string&amp; str) const;</td><td align="center">比较当前字符串从pos开始的n个字符组成的字符串与str的大小</td></tr><tr><td align="center">int compare(size_t pos, size_t n, const string&amp; str, size_t pos2, size_t n2)const;</td><td align="center">比较当前字符串从pos开始的n个字符组成的字符串与str中pos2开始的n2个字符组成的字符串的大小</td></tr><tr><td align="center">int compare(const char *s) const;</td><td align="center">当前字符串与C语言风格字符串s比较</td></tr><tr><td align="center">int compare(size_t pos, size_t n, const char* s) const;</td><td align="center">比较当前字符串从pos开始的n个字符组成的字符串与C风格字符串s的大小</td></tr><tr><td align="center">int compare(size_t pos, size_t n, const char* s, size_t pos2) const;</td><td align="center">比较当前字符串从pos开始的n个字符组成的字符串与C风格字符串s中从pos2位置开始的n个字符组成的字符串的大小</td></tr></tbody></table><h2 id="查找操作"><a href="#查找操作" class="headerlink" title="查找操作"></a>查找操作</h2><p>find为顺序查找，rfind（即reverse）为逆序查找。</p><table><thead><tr><th align="center">函数原型</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">size_t find(const string&amp; str, size_t pos &#x3D; 0) const;</td><td align="center">从pos位置开始查找str第一次出现的下标</td></tr><tr><td align="center">size_t find(const char* s, size_t pos &#x3D; 0) const;</td><td align="center">从pos位置开始查找C风格字符串s第一次出现的下标</td></tr><tr><td align="center">size_t find(const char* s, size_t pos, size_t n) const;</td><td align="center">从pos位置开始查找C风格字符串s的前n个字符第一次出现的位置</td></tr><tr><td align="center">size_t rfind(const string&amp; str, size_t pos &#x3D; npos) const;</td><td align="center">从pos位置开始查找str第一次出现的下标</td></tr><tr><td align="center">size_t rfind(const char* s, size_t pos &#x3D; npos) const;</td><td align="center">从pos位置开始查找C风格字符串s第一次出现的下标</td></tr><tr><td align="center">size_t rfind(const char* s, size_t pos, size_t n) const;</td><td align="center">从pos位置开始查找C风格字符串s的前n个字符第一次出现的位置</td></tr></tbody></table><h2 id="替换操作"><a href="#替换操作" class="headerlink" title="替换操作"></a>替换操作</h2><table><thead><tr><th align="center">函数原型</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">string&amp; replace(size_t pos, size_t len, const string&amp; str);</td><td align="center">从pos位置开始len长度的内容被替换为字符串str</td></tr><tr><td align="center">string&amp; replace(size_t pos, size_t len, const string&amp; str, size_t subpos, size_t sublen &#x3D; npos);</td><td align="center">从pos位置开始len长度的内容被替换为string对象str从位置subpos到sublen的内容</td></tr><tr><td align="center">string&amp; replace(size_t pos, size_t len, const char* s);</td><td align="center">从pos开始len长度的内容被替换为C风格字符串s</td></tr><tr><td align="center">string&amp; replace(size_t pos, size_t len, const char* s, size_t n);</td><td align="center">从pos位置开始len长度的内容被替换为C风格字符串s前n个字符大小的内容</td></tr><tr><td align="center">string&amp; replace(size_t pos, size_t len, size_t n, char c);</td><td align="center">从pos位置开始len长度的内容被n个字符c替换</td></tr></tbody></table><h2 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h2><table><thead><tr><th align="center">函数原型</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">string&amp; insert(size_t pos, const char* s);</td><td align="center">在pos位置插入C语言风格字符串s</td></tr><tr><td align="center">string&amp; insert(size_t pos, const char* s, size_t n);</td><td align="center">在pos位置插入C语言风格字符串s前n个字符大小的内容。</td></tr><tr><td align="center">string&amp; insert(size_t pos, const string&amp; str);</td><td align="center">在pos位置插入str</td></tr><tr><td align="center">string&amp; insert(size_t pos, const string&amp; str, size_t subpos, size_t sublen &#x3D; npos);</td><td align="center">在pos位置插入string对象str从位置subpos到位置sublen大小的内容</td></tr><tr><td align="center">string&amp; insert(size_t pos, size_t n, char c);</td><td align="center">在pos位置插入n个字符c</td></tr></tbody></table><h2 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h2><table><thead><tr><th align="center">函数原型</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">string&amp; erase(int pos, int n &#x3D; npos);</td><td align="center">删除从pos开始的n个字符</td></tr></tbody></table><h1 id="vector容器"><a href="#vector容器" class="headerlink" title="vector容器"></a>vector容器</h1><p>vector容器封装了动态数组。</p><p>使用时需包含头文件 <code>#include&lt;vector&gt;</code>。</p><h2 id="Constructor-1"><a href="#Constructor-1" class="headerlink" title="Constructor"></a>Constructor</h2><table><thead><tr><th align="center">函数原型</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">vector();</td><td align="center">创建一个空的vector容器</td></tr><tr><td align="center">vector(initializer_list&lt;T&gt; il);</td><td align="center">使用统一初始化列表</td></tr><tr><td align="center">vector(const vector&lt;T&gt;&amp; v);</td><td align="center">拷贝构造函数</td></tr><tr><td align="center">vector(Iterator first, Iterator last);</td><td align="center">用迭代器创建vector容器</td></tr><tr><td align="center">vector(vector&lt;T&gt;&amp;&amp; v);</td><td align="center">移动构造函数（C++11标准）</td></tr><tr><td align="center">explicit vector(const size_t n);</td><td align="center">创建vector容器，元素个数为n（容量和实际大小都是n）</td></tr><tr><td align="center">vector(const size_t n, const T&amp; value);</td><td align="center">创建vector容器，元素个数为n，值均为value</td></tr></tbody></table><h2 id="容量大小操作-1"><a href="#容量大小操作-1" class="headerlink" title="容量大小操作"></a>容量大小操作</h2><table><thead><tr><th align="center">函数原型</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">size_t capacity() const;</td><td align="center">返回容器当前容量</td></tr><tr><td align="center">size_t size() const;</td><td align="center">返回当前容器字符串长度</td></tr><tr><td align="center">bool empty() const;</td><td align="center">判断容器是否为空</td></tr><tr><td align="center">void clear();</td><td align="center">清空容器</td></tr><tr><td align="center">void resize(size_t length, char c &#x3D; 0);</td><td align="center">把容器实际大小设为legnth，若减小，则截断多余部分，若增大，则用字符c填充</td></tr></tbody></table><h1 id="list容器"><a href="#list容器" class="headerlink" title="list容器"></a>list容器</h1><h1 id="map容器"><a href="#map容器" class="headerlink" title="map容器"></a>map容器</h1><h1 id="unordered-map容器"><a href="#unordered-map容器" class="headerlink" title="unordered_map容器"></a>unordered_map容器</h1>]]></content>
      
      
      <categories>
          
          <category> 部长自用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Modern C++ (1)</title>
      <link href="/2023/10/30/C-%E5%85%A5%E9%97%A8/"/>
      <url>/2023/10/30/C-%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>技术部第一次培训（施工中…）</p><h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><p>C++是一种通用的高级编程语言，最初由Bjarne Stroustrup在1980年代早期作为C语言的扩展开发而来。C++语言结合了C语言的底层控制和高级语言的抽象特性，旨在提供更高级的编程工具和更大的灵活性。</p><p>C++是一种面向对象的编程语言，它支持封装、继承和多态等面向对象编程的核心概念。它还提供了诸多其他特性，如模板元编程、异常处理、运算符重载等，使得开发者能够以更高效和灵活的方式编写代码。</p><p>C++语言具有高效性和可移植性。与C语言一样，C++代码可以编译成机器码，因此具有高性能。此外，C++可以在许多平台上进行编译和运行，包括Windows、Linux、macOS等。</p><p>C++广泛应用于开发各种类型的软件，包括系统软件、应用程序、游戏、嵌入式系统等。由于其灵活性和高性能，C++常常用于对性能要求较高、对底层硬件操作较多的领域，如游戏开发、图形处理、网络编程等。</p><p>总结来说，C++是一种功能强大、灵活多样的编程语言，适用于多种开发场景，是许多程序员和软件开发者的首选语言之一。</p><h1 id="个人见解"><a href="#个人见解" class="headerlink" title="个人见解"></a>个人见解</h1><p>C++的学习曲线无疑是非常陡峭的，由于C++要兼容C，以及各种历史遗留问题，导致C++是非常复杂的。又由于C++的特性过于强大且复杂，有点既要又要的意思，让本就不简单的语言更雪上加霜。</p><p>部分同学可能在学习完C后再学C++会产生“C++也不过如此”的想法。巧了，刚开始的我也是这么认为的，不过在接触了Modern C++后才发现C++是真的学不完的，太复杂了。学校教的仅仅是开胃小菜而已。</p><hr><h1 id="第一个C-程序"><a href="#第一个C-程序" class="headerlink" title="第一个C++程序"></a>第一个C++程序</h1><p>以下是一个简单的C++程序，它的功能是在控制台输出Hello world!</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span><span class="comment">//使用输入输出流，包含iostream头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;<span class="comment">//主函数，程序的入口，程序将由此开始执行</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Hello world!&quot;</span> &lt;&lt; std::endl;<span class="comment">//使用std命名空间下的cout对象输出Hello world！</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//返回0，表示程序正常运行完毕</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span><span class="comment">//使用输入输出流，包含iostream头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;<span class="comment">//使用std标准库命名空间</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;<span class="comment">//主函数，程序的入口，程序将由此开始执行</span></span><br><span class="line">    <span class="comment">//由于使用std命名空间，所以不再需要std::</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello world!&quot;</span> &lt;&lt; endl;<span class="comment">//使用cout对象输出Hello world！</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//返回0，表示程序正常运行完毕</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拆分解释"><a href="#拆分解释" class="headerlink" title="拆分解释"></a>拆分解释</h2><ul><li>注释，由前缀<code>//</code>标识。</li><li>预处理器编译命令<code>#include</code>。</li><li>编译指令<code>using namespace</code>。</li><li>函数头：<code>int main()</code>。</li><li>函数体，用<code>&#123;</code>和<code>&#125;</code>括起。</li><li>使用C++的<code>cout</code>工具显示消息的语句。</li><li>结束<code>main()</code>函数的<code>return</code>语句。</li></ul><h1 id="include预处理宏命令"><a href="#include预处理宏命令" class="headerlink" title="#include预处理宏命令"></a>#include预处理宏命令</h1><p>C++20起加入了模块机制，可以用import导入头文件，可以防止头文件被多次include导致redefinition。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &lt;iostream&gt;</span><br></pre></td></tr></table></figure><p>不过由于目前阶段功能仍不稳定，部分编译器未提供完整支持，MSVC不清楚，gcc&#x2F;g++目前是不支持的。</p><hr><p>在示例程序中，我们使用了<code>#include &lt;iostream&gt;</code>，C++委员会已经为我们规定好了标准库，其中包含了许多功能，我们所需要的输出流对象<code>cout</code>，就位于<code>iostream</code>头文件中，所以我们要包含此文件头。</p><p><code>#include</code>其实仅仅是将代码原封不动的复制过来，并不会进行语法检查。</p><p>如下</p><p><img src="https://s1.imagehub.cc/images/2024/03/18/96e6e138c87e7faf35a18378ed41b67a.png" alt="96e6e138c87e7faf35a18378ed41b67a.png"></p><p>C++委员会已经为我们写好了如何通过控制台输出，原理我们目前阶段不必深究，会用即可。</p><blockquote><p>我们常说的程序员会Ctrl+C，Ctrl+V就可以了，大概就是如此罢！</p></blockquote><h1 id="初学阶段程序模板"><a href="#初学阶段程序模板" class="headerlink" title="初学阶段程序模板"></a>初学阶段程序模板</h1><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//函数体</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong>在C++中，每条完整的指令都称为语句，所有的语句都以分号<code>;</code>结束。注意：宏命令（带#的）除外</strong></em></p><p><em><strong>代码中的每个括号都要成对出现，&lt;&gt;[]{}()</strong></em></p><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><h2 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h2><p>单行注释以<code>//</code>打头，行尾结束。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实现两数相加，返回两数之和</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h2><p>多行注释以<code>/*</code> <code>*/</code>包裹，以<code>/*</code>开始，以<code>*/</code>结束。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">实现两数相加</span></span><br><span class="line"><span class="comment">返回两数之和</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h2><p>文档注释</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现两数相加</span></span><br><span class="line"><span class="comment"> * @param x 参数1</span></span><br><span class="line"><span class="comment"> * @param y 参数2</span></span><br><span class="line"><span class="comment"> * @return 两数之和</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="切换呈现视图"><a href="#切换呈现视图" class="headerlink" title="切换呈现视图"></a>切换呈现视图</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">| 实现两数相加</span><br><span class="line">| Parameters</span><br><span class="line">| x参数<span class="number">1</span></span><br><span class="line">| y参数<span class="number">2</span></span><br><span class="line">| </span><br><span class="line">| Returns</span><br><span class="line">| 两数之和</span><br><span class="line">|</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h1><p><strong>1byte &#x3D; 8bits，一字节等于八位。</strong></p><h2 id="文字类"><a href="#文字类" class="headerlink" title="文字类"></a>文字类</h2><h3 id="char（1byte）"><a href="#char（1byte）" class="headerlink" title="char（1byte）"></a>char（1byte）</h3><p>表单个字符，字符需用一对单引号<code>&#39; &#39;</code>包裹。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> cha &#123;<span class="string">&#x27;a&#x27;</span>&#125;;</span><br><span class="line"><span class="type">char</span> chb &#123;<span class="string">&#x27;3&#x27;</span>&#125;;</span><br></pre></td></tr></table></figure><h4 id="unsigned-char"><a href="#unsigned-char" class="headerlink" title="unsigned char"></a>unsigned char</h4><h3 id="std-string（dynamic）"><a href="#std-string（dynamic）" class="headerlink" title="std::string（dynamic）"></a>std::string（dynamic）</h3><p>表字符串，字符串需用一对双引号<code>&quot; &quot;</code>包裹</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::string str &#123;<span class="string">&quot;Hello world!&quot;</span>&#125;;</span><br></pre></td></tr></table></figure><h2 id="数字类"><a href="#数字类" class="headerlink" title="数字类"></a>数字类</h2><h3 id="整数类"><a href="#整数类" class="headerlink" title="整数类"></a>整数类</h3><h4 id="short（2bytes）"><a href="#short（2bytes）" class="headerlink" title="short（2bytes）"></a>short（2bytes）</h4><h5 id="unsigned-short"><a href="#unsigned-short" class="headerlink" title="unsigned short"></a>unsigned short</h5><h4 id="int（4bytes）"><a href="#int（4bytes）" class="headerlink" title="int（4bytes）"></a>int（4bytes）</h4><p>整型，只能存储整数</p><h5 id="unsigned-int"><a href="#unsigned-int" class="headerlink" title="unsigned int"></a>unsigned int</h5><p>无符号整型，只能存储非负整数</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a &#123;<span class="number">-10</span>&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> b &#123;<span class="number">6</span>&#125;;</span><br></pre></td></tr></table></figure><h4 id="long（4bytes）"><a href="#long（4bytes）" class="headerlink" title="long（4bytes）"></a>long（4bytes）</h4><p>long类型在不同系统上大小是不同的，C++委员会只规定了其至少为4字节。</p><h5 id="unsigned-long"><a href="#unsigned-long" class="headerlink" title="unsigned long"></a>unsigned long</h5><h4 id="long-long（8bytes）"><a href="#long-long（8bytes）" class="headerlink" title="long long（8bytes）"></a>long long（8bytes）</h4><h5 id="unsigned-long-long"><a href="#unsigned-long-long" class="headerlink" title="unsigned long long"></a>unsigned long long</h5><h3 id="小数类"><a href="#小数类" class="headerlink" title="小数类"></a>小数类</h3><h4 id="float（4bytes）"><a href="#float（4bytes）" class="headerlink" title="float（4bytes）"></a>float（4bytes）</h4><p>单精度小数</p><h4 id="double（8bytes）"><a href="#double（8bytes）" class="headerlink" title="double（8bytes）"></a>double（8bytes）</h4><p>双精度小数</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> a &#123;<span class="number">3.14</span>&#125;;</span><br><span class="line"><span class="type">double</span> b &#123;<span class="number">0.618</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="long-double（16bytes）"><a href="#long-double（16bytes）" class="headerlink" title="long double（16bytes）"></a>long double（16bytes）</h4><h1 id="变量，常量与初始化和赋值"><a href="#变量，常量与初始化和赋值" class="headerlink" title="变量，常量与初始化和赋值"></a>变量，常量与初始化和赋值</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2>]]></content>
      
      
      <categories>
          
          <category> 培训文件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux与Windows共存时间问题</title>
      <link href="/2023/10/21/Linux%E4%B8%8EWindows%E5%85%B1%E5%AD%98%E6%97%B6%E9%97%B4%E9%97%AE%E9%A2%98/"/>
      <url>/2023/10/21/Linux%E4%B8%8EWindows%E5%85%B1%E5%AD%98%E6%97%B6%E9%97%B4%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux与Windows双系统共存时，由于两者的时间计算策略不同，导致两者时间相差8h。"><a href="#Linux与Windows双系统共存时，由于两者的时间计算策略不同，导致两者时间相差8h。" class="headerlink" title="Linux与Windows双系统共存时，由于两者的时间计算策略不同，导致两者时间相差8h。"></a>Linux与Windows双系统共存时，由于两者的时间计算策略不同，导致两者时间相差8h。</h1><h2 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h2><p>主板BIOS中有一个时间，Windows会认为它就是当地的时间，而Linux则会认为它是UTC世界时间，会在此基础上+8h(时区不同结果不同)作为最终结果。Windows进行时间同步时会将当前时间直接存入BIOS，而Linux会在此基础上-8h后再存入BIOS。这时启动Windows，Windows会认为当前BIOS时间为当地时间，就会出现比真实时间慢8h的情况。</p><h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><h3 id="以Kali-Linux为例"><a href="#以Kali-Linux为例" class="headerlink" title="以Kali Linux为例:"></a>以Kali Linux为例:</h3><h4 id="完整"><a href="#完整" class="headerlink" title="完整:"></a>完整:</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(nancy㉿Nancy-Kali)-[~]</span><br><span class="line">└─$ timedatectl status         </span><br><span class="line">               Local time: 六 2023-10-21 09:24:02 CST</span><br><span class="line">           Universal time: 六 2023-10-21 01:24:02 UTC</span><br><span class="line">                 RTC time: 六 2023-10-21 01:24:02</span><br><span class="line">                Time zone: Asia/Shanghai (CST, +0800)</span><br><span class="line">System clock synchronized: no</span><br><span class="line">              NTP service: active</span><br><span class="line">          RTC <span class="keyword">in</span> <span class="built_in">local</span> TZ: no</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">┌──(nancy㉿Nancy-Kali)-[~]</span><br><span class="line">└─$ timedatectl set-local-rtc 1</span><br><span class="line">                                                                                                    </span><br><span class="line">┌──(nancy㉿Nancy-Kali)-[~]</span><br><span class="line">└─$ timedatectl status         </span><br><span class="line">               Local time: 六 2023-10-21 09:24:31 CST</span><br><span class="line">           Universal time: 六 2023-10-21 01:24:31 UTC</span><br><span class="line">                 RTC time: 六 2023-10-21 09:24:31</span><br><span class="line">                Time zone: Asia/Shanghai (CST, +0800)</span><br><span class="line">System clock synchronized: no</span><br><span class="line">              NTP service: active</span><br><span class="line">          RTC <span class="keyword">in</span> <span class="built_in">local</span> TZ: <span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line">Warning: The system is configured to <span class="built_in">read</span> the RTC time <span class="keyword">in</span> the <span class="built_in">local</span> time zone.</span><br><span class="line">         This mode cannot be fully supported. It will create various problems</span><br><span class="line">         with time zone changes and daylight saving time adjustments. The RTC</span><br><span class="line">         time is never updated, it relies on external facilities to maintain it.</span><br><span class="line">         If at all possible, use RTC <span class="keyword">in</span> UTC by calling</span><br><span class="line">         <span class="string">&#x27;timedatectl set-local-rtc 0&#x27;</span>.</span><br><span class="line">                                                                                                    </span><br><span class="line">┌──(nancy㉿Nancy-Kali)-[~]</span><br><span class="line">└─$ </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="仅命令"><a href="#仅命令" class="headerlink" title="仅命令:"></a>仅命令:</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(nancy㉿Nancy-Kali)-[~]</span><br><span class="line">└─$ timedatectl status</span><br><span class="line"></span><br><span class="line">┌──(nancy㉿Nancy-Kali)-[~]</span><br><span class="line">└─$ timedatectl set-local-rtc 1</span><br><span class="line"></span><br><span class="line">┌──(nancy㉿Nancy-Kali)-[~]</span><br><span class="line">└─$ timedatectl status</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 部长自用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CMake</title>
      <link href="/2023/10/19/cmake%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/10/19/cmake%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="CMake"><a href="#CMake" class="headerlink" title="CMake"></a>CMake</h1><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>cmake的定义是什么 ？—–高级编译配置工具</p><p>当多个人用不同的语言或者编译器开发一个项目，最终要输出一个可执行文件或者共享库（dll，so等等）这时候神器就出现了—–CMake！</p><p>所有操作都是通过编译CMakeLists.txt来完成的—简单</p><p>官方网站是 <a href="http://www.cmake.org/">www.cmake.org</a>，可以通过访问官方网站获得更多关于 cmake 的信息</p><p>学习CMake的目的，为将来处理大型的C&#x2F;C++&#x2F;JAVA项目做准备</p><h1 id="CMake安装"><a href="#CMake安装" class="headerlink" title="CMake安装"></a>CMake安装</h1><p>1、绝大多数的linux系统已经安装了CMake</p><p>2、Windows或某些没有安装过的linux系统，去<a href="http://www.cmake.org/HTML/Download.html">http://www.cmake.org/HTML/Download.html</a>可以下载安装</p><h1 id="CMake一个HelloWord"><a href="#CMake一个HelloWord" class="headerlink" title="CMake一个HelloWord"></a>CMake一个HelloWord</h1><p>1、步骤一，写一个HelloWord</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt;  <span class="string">&quot;hello world&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、步骤二，写<code>CMakeLists.txt</code></p><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment">#CMakeLists.txt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMAKE_MINIMUM_REQUIRED</span>(VERSION <span class="number">3.27</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">PROJECT</span>(HELLO)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span>(SRC_LIST main.cpp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">MESSAGE</span>(STATUS <span class="string">&quot;This is BINARY dir &quot;</span> <span class="variable">$&#123;HELLO_BINARY_DIR&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">MESSAGE</span>(STATUS <span class="string">&quot;This is SOURCE dir &quot;</span><span class="variable">$&#123;HELLO_SOURCE_DIR&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD_EXECUTABLE</span>(hello <span class="variable">$&#123;SRC_LIST&#125;</span>)</span><br></pre></td></tr></table></figure><p>3、步骤三、使用<code>cmake</code>，生成<code>Makefile</code>文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmake .</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">[root@localhost cmake]<span class="comment"># cmake .</span></span><br><span class="line">CMake Warning (dev) <span class="keyword">in</span> CMakeLists.txt:</span><br><span class="line">  Syntax Warning <span class="keyword">in</span> cmake code at</span><br><span class="line"></span><br><span class="line">    /root/cmake/CMakeLists.txt:7:37</span><br><span class="line"></span><br><span class="line">  Argument not separated from preceding token by whitespace.</span><br><span class="line">This warning is <span class="keyword">for</span> project developers.  Use -Wno-dev to suppress it.</span><br><span class="line"></span><br><span class="line">-- The C compiler identification is GNU 10.2.1</span><br><span class="line">-- The CXX compiler identification is GNU 10.2.1</span><br><span class="line">-- Check <span class="keyword">for</span> working C compiler: /usr/bin/cc</span><br><span class="line">-- Check <span class="keyword">for</span> working C compiler: /usr/bin/cc -- works</span><br><span class="line">-- Detecting C compiler ABI info</span><br><span class="line">-- Detecting C compiler ABI info - <span class="keyword">done</span></span><br><span class="line">-- Check <span class="keyword">for</span> working CXX compiler: /usr/bin/c++</span><br><span class="line">-- Check <span class="keyword">for</span> working CXX compiler: /usr/bin/c++ -- works</span><br><span class="line">-- Detecting CXX compiler ABI info</span><br><span class="line">-- Detecting CXX compiler ABI info - <span class="keyword">done</span></span><br><span class="line">-- This is BINARY <span class="built_in">dir</span> /root/cmake</span><br><span class="line">-- This is SOURCE <span class="built_in">dir</span> /root/cmake</span><br><span class="line">-- Configuring <span class="keyword">done</span></span><br><span class="line">-- Generating <span class="keyword">done</span></span><br><span class="line">-- Build files have been written to: /root/cmake</span><br></pre></td></tr></table></figure><p>目录下就生成了这些文件<code>CMakeFiles</code>, <code>CMakeCache.txt</code>, <code>cmake_install.cmake</code> 等文件，并且生成了<code>Makefile</code>.<br>现在不需要理会这些文件的作用，以后你也可以不去理会。最关键的是，它自动生成了<code>Makefile</code>.</p><p>4、使用<code>make</code>命令编译</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@localhost cmake]<span class="comment"># make</span></span><br><span class="line">Scanning dependencies of target hello</span><br><span class="line">[100%] Building CXX object CMakeFiles/hello.dir/main.cpp.o</span><br><span class="line">Linking CXX executable hello</span><br><span class="line">[100%] Built target hello</span><br></pre></td></tr></table></figure><p>5、最终生成了<code>Hello</code>的可执行程序</p><h1 id="CMake一个HelloWord的语法介绍"><a href="#CMake一个HelloWord的语法介绍" class="headerlink" title="CMake一个HelloWord的语法介绍"></a>CMake一个HelloWord的语法介绍</h1><h2 id="PROJECT关键字"><a href="#PROJECT关键字" class="headerlink" title="PROJECT关键字"></a>PROJECT关键字</h2><p>可以用来指定工程的名字和支持的语言，默认支持所有语言</p><p><code>PROJECT (HELLO)</code>   指定了工程的名字，并且支持所有语言—建议</p><p><code>PROJECT (HELLO CXX)</code>      指定了工程的名字，并且支持语言是C++</p><p><code>PROJECT (HELLO C CXX)</code>      指定了工程的名字，并且支持语言是C和C++</p><p>该指定隐式定义了两个CMAKE的变量</p><p><code>&lt;projectname&gt;_BINARY_DIR</code>，本例中是 <code>HELLO_BINARY_DIR</code></p><p><code>&lt;projectname&gt;_SOURCE_DIR</code>，本例中是 <code>HELLO_SOURCE_DIR</code></p><p><code>MESSAGE</code>关键字就可以直接使用者两个变量，当前都指向当前的工作目录，后面会讲外部编译</p><p>问题：如果改了工程名，这两个变量名也会改变</p><p>解决：又定义两个预定义变量：<code>PROJECT_BINARY_DIR</code>和<code>PROJECT_SOURCE_DIR</code>，这两个变量和<code>HELLO_BINARY_DIR</code>，<code>HELLO_SOURCE_DIR</code>是一致的。所以改了工程名也没有关系</p><h2 id="SET关键字"><a href="#SET关键字" class="headerlink" title="SET关键字"></a>SET关键字</h2><p>用来显示的指定变量的</p><p><code>SET(SRC_LIST main.cpp)</code>    SRC_LIST变量就包含了main.cpp</p><p>也可以 <code>SET(SRC_LIST main.cpp t1.cpp t2.cpp)</code></p><hr><h2 id="MESSAGE关键字"><a href="#MESSAGE关键字" class="headerlink" title="MESSAGE关键字"></a>MESSAGE关键字</h2><p>向终端输出用户自定义的信息</p><p>主要包含三种信息：</p><ul><li>SEND_ERROR，产生错误，生成过程被跳过。</li><li>SATUS，输出前缀为—的信息。</li><li>FATAL_ERROR，立即终止所有 cmake 过程.</li></ul><h2 id="ADD-EXECUTABLE关键字"><a href="#ADD-EXECUTABLE关键字" class="headerlink" title="ADD_EXECUTABLE关键字"></a>ADD_EXECUTABLE关键字</h2><p>生成可执行文件</p><p>ADD_EXECUTABLE(hello ${SRC_LIST})     生成的可执行文件名是hello，源文件读取变量SRC_LIST中的内容</p><p>也可以直接写 ADD_EXECUTABLE(hello main.cpp)</p><p>上述例子可以简化的写成</p><p>PROJECT(HELLO)<br>ADD_EXECUTABLE(hello main.cpp)</p><p>注意：工程名的 HELLO 和生成的可执行文件 hello 是没有任何关系的</p><h1 id="语法的基本原则"><a href="#语法的基本原则" class="headerlink" title="语法的基本原则"></a>语法的基本原则</h1><ul><li><p>变量使用${}方式取值，但是在 IF 控制语句中是直接使用变量名</p></li><li><p>指令(参数 1 参数 2…) 参数使用括弧括起，参数之间使用空格或分号分开。 以上面的 ADD_EXECUTABLE 指令为例，如果存在另外一个 func.cpp 源文件</p><p>  就要写成：ADD_EXECUTABLE(hello main.cpp func.cpp)或者ADD_EXECUTABLE(hello main.cpp;func.cpp)</p></li><li><p>指令是大小写无关的，参数和变量是大小写相关的。但，推荐你全部使用大写指令</p></li></ul><h2 id="语法注意事项"><a href="#语法注意事项" class="headerlink" title="语法注意事项"></a>语法注意事项</h2><ul><li>SET(SRC_LIST main.cpp) 可以写成 SET(SRC_LIST “main.cpp”)，如果源文件名中含有空格，就必须要加双引号</li><li>ADD_EXECUTABLE(hello main) 后缀可以不行，他会自动去找.c和.cpp，最好不要这样写，可能会有这两个文件main.cpp和main</li></ul><h1 id="内部构建和外部构建"><a href="#内部构建和外部构建" class="headerlink" title="内部构建和外部构建"></a>内部构建和外部构建</h1><ul><li>上述例子就是内部构建，他生产的临时文件特别多，不方便清理</li><li>外部构建，就会把生成的临时文件放在build目录下，不会对源文件有任何影响强烈使用外部构建方式</li></ul><h2 id="外部构建方式举例"><a href="#外部构建方式举例" class="headerlink" title="外部构建方式举例"></a>外部构建方式举例</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例子目录，CMakeLists.txt和上面例子一致</span></span><br><span class="line">[root@localhost cmake]<span class="meta"># pwd</span></span><br><span class="line">/root/cmake</span><br><span class="line">[root@localhost cmake]<span class="meta"># ll</span></span><br><span class="line">total <span class="number">8</span></span><br><span class="line">-rw-r--r--. <span class="number">1</span> root root <span class="number">198</span> Dec <span class="number">28</span> <span class="number">20</span>:<span class="number">59</span> CMakeLists.txt</span><br><span class="line">-rw-r--r--. <span class="number">1</span> root root  <span class="number">76</span> Dec <span class="number">28</span> <span class="number">00</span>:<span class="number">18</span> main.cpp</span><br></pre></td></tr></table></figure><p>1、建立一个build目录，可以在任何地方，建议在当前目录下</p><p>2、进入build，运行cmake ..    当然..表示上一级目录，你可以写CMakeLists.txt所在的绝对路径，生产的文件都在build目录下了</p><p>3、在build目录下，运行make来构建工程</p><p>注意外部构建的两个变量</p><p>1、HELLO_SOURCE_DIR  还是工程路径</p><p>2、HELLO_BINARY_DIR   编译路径 也就是 &#x2F;root&#x2F;cmake&#x2F;bulid</p><h1 id="让Hello-World看起来更像一个工程"><a href="#让Hello-World看起来更像一个工程" class="headerlink" title="让Hello World看起来更像一个工程"></a>让Hello World看起来更像一个工程</h1><ul><li>为工程添加一个子目录 src，用来放置工程源代码</li><li>添加一个子目录 doc，用来放置这个工程的文档 hello.txt</li><li>在工程目录添加文本文件 COPYRIGHT, README</li><li>在工程目录添加一个 <a href="http://runhello.sh/">runhello.sh</a> 脚本，用来调用 hello 二进制</li><li>将构建后的目标文件放入构建目录的 bin 子目录</li><li>将 doc 目录 的内容以及 COPYRIGHT&#x2F;README 安装到&#x2F;usr&#x2F;share&#x2F;doc&#x2F;cmake&#x2F;</li></ul><h2 id="将目标文件放入构建目录的-bin-子目录"><a href="#将目标文件放入构建目录的-bin-子目录" class="headerlink" title="将目标文件放入构建目录的 bin 子目录"></a>将目标文件放入构建目录的 bin 子目录</h2><p>每个目录下都要有一个CMakeLists.txt说明</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">[root@localhost cmake]<span class="meta"># tree</span></span><br><span class="line">.</span><br><span class="line">├── build</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">└── src</span><br><span class="line">    ├── CMakeLists.txt</span><br><span class="line">    └── main.cpp</span><br></pre></td></tr></table></figure><p>外层CMakeLists.txt</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">PROJECT</span>(HELLO)</span><br><span class="line"><span class="built_in">ADD_SUBDIRECTORY</span>(src bin)</span><br></pre></td></tr></table></figure><p>src下的CMakeLists.txt</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ADD_EXECUTABLE</span>(hello main.cpp)</span><br></pre></td></tr></table></figure><h3 id="ADD-SUBDIRECTORY-指令"><a href="#ADD-SUBDIRECTORY-指令" class="headerlink" title="ADD_SUBDIRECTORY 指令"></a>ADD_SUBDIRECTORY 指令</h3><p>ADD_SUBDIRECTORY(source_dir [binary_dir] [EXCLUDE_FROM_ALL])</p><ul><li><p>这个指令用于向当前工程添加存放源文件的子目录，并可以指定中间二进制和目标二进制存放的位置</p></li><li><p>EXCLUDE_FROM_ALL函数是将写的目录从编译中排除，如程序中的example</p></li><li><p>ADD_SUBDIRECTORY(src bin)</p><p>  将 src 子目录加入工程并指定编译输出(包含编译中间结果)路径为bin 目录</p><p>  如果不进行 bin 目录的指定，那么编译结果(包括中间结果)都将存放在build&#x2F;src 目录</p></li></ul><h3 id="更改二进制的保存路径"><a href="#更改二进制的保存路径" class="headerlink" title="更改二进制的保存路径"></a>更改二进制的保存路径</h3><p>SET 指令重新定义 EXECUTABLE_OUTPUT_PATH 和 LIBRARY_OUTPUT_PATH 变量 来指定最终的目标二进制的位置</p><p>SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}&#x2F;bin)<br>SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}&#x2F;lib)</p><p>思考：加载哪个CMakeLists.txt当中</p><p>哪里要改变目标存放路径，就在哪里加入上述的定义，所以应该在src下的CMakeLists.txt下写</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ul><li>一种是从代码编译后直接 make install 安装</li><li>一种是打包时的指定 目录安装。<ul><li>简单的可以这样指定目录：make install DESTDIR&#x3D;&#x2F;tmp&#x2F;test</li><li>稍微复杂一点可以这样指定目录：.&#x2F;configure –prefix&#x3D;&#x2F;usr</li></ul></li></ul><h2 id="如何安装HelloWord"><a href="#如何安装HelloWord" class="headerlink" title="如何安装HelloWord"></a>如何安装HelloWord</h2><p>使用CMAKE一个新的指令：INSTALL</p><p>INSTALL的安装可以包括：二进制、动态库、静态库以及文件、目录、脚本等</p><p>使用CMAKE一个新的变量：CMAKE_INSTALL_PREFIX</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 目录树结构</span></span><br><span class="line">[root@localhost cmake]<span class="meta"># tree</span></span><br><span class="line">.</span><br><span class="line">├── build</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── COPYRIGHT</span><br><span class="line">├── doc</span><br><span class="line">│   └── hello.txt</span><br><span class="line">├── README</span><br><span class="line">├── runhello.sh</span><br><span class="line">└── src</span><br><span class="line">    ├── CMakeLists.txt</span><br><span class="line">    └── main.cpp</span><br><span class="line"></span><br><span class="line"><span class="number">3</span> directories, <span class="number">7</span> files</span><br></pre></td></tr></table></figure><h3 id="安装文件COPYRIGHT和README"><a href="#安装文件COPYRIGHT和README" class="headerlink" title="安装文件COPYRIGHT和README"></a>安装文件COPYRIGHT和README</h3><p>INSTALL(FILES COPYRIGHT README DESTINATION share&#x2F;doc&#x2F;cmake&#x2F;)</p><p>FILES：文件</p><p>DESTINATION：</p><p>1、写绝对路径</p><p>2、可以写相对路径，相对路径实际路径是：${CMAKE_INSTALL_PREFIX}&#x2F;&lt;DESTINATION 定义的路径&gt;</p><p>CMAKE_INSTALL_PREFIX  默认是在 &#x2F;usr&#x2F;local&#x2F;</p><p>cmake -DCMAKE_INSTALL_PREFIX&#x3D;&#x2F;usr    在cmake的时候指定CMAKE_INSTALL_PREFIX变量的路径</p><h3 id="安装脚本runhello-sh"><a href="#安装脚本runhello-sh" class="headerlink" title="安装脚本runhello.sh"></a>安装脚本runhello.sh</h3><p>PROGRAMS：非目标文件的可执行程序安装(比如脚本之类)</p><p>INSTALL(PROGRAMS runhello.sh DESTINATION bin)</p><p>说明：实际安装到的是 &#x2F;usr&#x2F;bin</p><h3 id="安装-doc-中的-hello-txt"><a href="#安装-doc-中的-hello-txt" class="headerlink" title="安装 doc 中的 hello.txt"></a>安装 doc 中的 hello.txt</h3><ul><li><p>一、是通过在 doc 目录建立CMakeLists.txt ，通过install下的file</p></li><li><p>二、是直接在工程目录通过</p><p>   INSTALL(DIRECTORY doc&#x2F; DESTINATION share&#x2F;doc&#x2F;cmake)</p></li></ul><p>DIRECTORY 后面连接的是所在 Source 目录的相对路径</p><p>注意：abc 和 abc&#x2F;有很大的区别</p><p>目录名不以&#x2F;结尾：这个目录将被安装为目标路径下的</p><p>目录名以&#x2F;结尾：将这个目录中的内容安装到目标路径</p><h3 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h3><p>cmake ..</p><p>make</p><p>make install</p><h1 id="静态库和动态库的构建"><a href="#静态库和动态库的构建" class="headerlink" title="静态库和动态库的构建"></a>静态库和动态库的构建</h1><p>任务：</p><p>１，建立一个静态库和动态库，提供 HelloFunc 函数供其他程序编程使用，HelloFunc 向终端输出 Hello World 字符串。 </p><p>２，安装头文件与共享库。</p><p>静态库和动态库的区别</p><ul><li>静态库的扩展名一般为“.a”或“.lib”；动态库的扩展名一般为“.so”或“.dll”。</li><li>静态库在编译时会直接整合到目标程序中，编译成功的可执行文件可独立运行</li><li>动态库在编译时不会放到连接的目标程序中，即可执行文件无法单独运行。</li></ul><h2 id="构建实例"><a href="#构建实例" class="headerlink" title="构建实例"></a>构建实例</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost cmake2]<span class="comment"># tree</span></span><br><span class="line">.</span><br><span class="line">├── build</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">└── lib</span><br><span class="line">    ├── CMakeLists.txt</span><br><span class="line">    ├── hello.cpp</span><br><span class="line">    └── hello.h</span><br></pre></td></tr></table></figure><p>hello.h中的内容</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> HELLO_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Hello_H</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HelloFunc</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>hello.cpp中的内容</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hello.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HelloFunc</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Hello World&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>项目中的cmake内容</p><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">PROJECT</span>(HELLO)</span><br><span class="line"><span class="keyword">ADD_SUBDIRECTORY</span>(lib bin)</span><br></pre></td></tr></table></figure><p>lib中CMakeLists.txt中的内容</p><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span>(LIBHELLO_SRC hello.cpp)</span><br><span class="line"><span class="keyword">ADD_LIBRARY</span>(hello SHARED <span class="variable">$&#123;LIBHELLO_SRC&#125;</span>)</span><br></pre></td></tr></table></figure><h3 id="ADD-LIBRARY"><a href="#ADD-LIBRARY" class="headerlink" title="ADD_LIBRARY"></a>ADD_LIBRARY</h3><p>ADD_LIBRARY(hello SHARED ${LIBHELLO_SRC})</p><ul><li>hello：就是正常的库名，生成的名字前面会加上lib，最终产生的文件是libhello.so</li><li>SHARED，动态库    STATIC，静态库</li><li>${LIBHELLO_SRC} ：源文件</li></ul><h3 id="同时构建静态和动态库"><a href="#同时构建静态和动态库" class="headerlink" title="同时构建静态和动态库"></a>同时构建静态和动态库</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">// 如果用这种方式，只会构建一个动态库，不会构建出静态库，虽然静态库的后缀是.a</span><br><span class="line"><span class="keyword">ADD_LIBRARY</span>(hello SHARED <span class="variable">$&#123;LIBHELLO_SRC&#125;</span>)</span><br><span class="line"><span class="keyword">ADD_LIBRARY</span>(hello STATIC <span class="variable">$&#123;LIBHELLO_SRC&#125;</span>)</span><br><span class="line"></span><br><span class="line">// 修改静态库的名字，这样是可以的，但是我们往往希望他们的名字是相同的，只是后缀不同而已</span><br><span class="line"><span class="keyword">ADD_LIBRARY</span>(hello SHARED <span class="variable">$&#123;LIBHELLO_SRC&#125;</span>)</span><br><span class="line"><span class="keyword">ADD_LIBRARY</span>(hello_static STATIC <span class="variable">$&#123;LIBHELLO_SRC&#125;</span>)</span><br></pre></td></tr></table></figure><h3 id="SET-TARGET-PROPERTIES"><a href="#SET-TARGET-PROPERTIES" class="headerlink" title="SET_TARGET_PROPERTIES"></a>SET_TARGET_PROPERTIES</h3><p>这条指令可以用来设置输出的名称，对于动态库，还可以用来指定动态库版本和 API 版本</p><p>同时构建静态和动态库</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">SET</span>(LIBHELLO_SRC hello.cpp)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ADD_LIBRARY</span>(hello_static STATIC $&#123;LIBHELLO_SRC&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//对hello_static的重名为hello</span></span><br><span class="line"><span class="built_in">SET_TARGET_PROPERTIES</span>(hello_static PROPERTIES  OUTPUT_NAME <span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="comment">//cmake 在构建一个新的target 时，会尝试清理掉其他使用这个名字的库，因为，在构建 libhello.so 时， 就会清理掉 libhello.a</span></span><br><span class="line"><span class="built_in">SET_TARGET_PROPERTIES</span>(hello_static PROPERTIES CLEAN_DIRECT_OUTPUT <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ADD_LIBRARY</span>(hello SHARED $&#123;LIBHELLO_SRC&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">SET_TARGET_PROPERTIES</span>(hello PROPERTIES  OUTPUT_NAME <span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="built_in">SET_TARGET_PROPERTIES</span>(hello PROPERTIES CLEAN_DIRECT_OUTPUT <span class="number">1</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="动态库的版本号"><a href="#动态库的版本号" class="headerlink" title="动态库的版本号"></a>动态库的版本号</h3><p>一般动态库都有一个版本号的关联</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">libhello.so<span class="number">.1</span><span class="number">.2</span></span><br><span class="line">libhello.so -&gt;libhello.so<span class="number">.1</span></span><br><span class="line">libhello.so<span class="number">.1</span>-&gt;libhello.so<span class="number">.1</span><span class="number">.2</span></span><br></pre></td></tr></table></figure><p>CMakeLists.txt 插入如下</p><p><code>SET_TARGET_PROPERTIES(hello PROPERTIES VERSION 1.2 SOVERSION 1)</code></p><p>VERSION 指代动态库版本，SOVERSION 指代 API 版本。</p><h3 id="安装共享库和头文件"><a href="#安装共享库和头文件" class="headerlink" title="安装共享库和头文件"></a>安装共享库和头文件</h3><p>本例中我们将 hello 的共享库安装到<prefix>&#x2F;lib目录，</p><p>将 hello.h 安装到<prefix>&#x2F;include&#x2F;hello 目录</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//文件放到该目录下</span></span><br><span class="line"><span class="built_in">INSTALL</span>(FILES hello.h DESTINATION include/hello)</span><br><span class="line"></span><br><span class="line"><span class="comment">//二进制，静态库，动态库安装都用TARGETS</span></span><br><span class="line"><span class="comment">//ARCHIVE 特指静态库，LIBRARY 特指动态库，RUNTIME 特指可执行目标二进制。</span></span><br><span class="line"><span class="built_in">INSTALL</span>(TARGETS hello hello_static LIBRARY DESTINATION lib ARCHIVE DESTINATION lib)</span><br></pre></td></tr></table></figure><p>注意：</p><p>安装的时候，指定一下路径，放到系统下</p><p><code>cmake -DCMAKE_INSTALL_PREFIX=/usr ..</code></p><h3 id="使用外部共享库和头文件"><a href="#使用外部共享库和头文件" class="headerlink" title="使用外部共享库和头文件"></a>使用外部共享库和头文件</h3><p>准备工作，新建一个目录来使用外部共享库和头文件</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">[root@MiWiFi-R4CM-srv cmake3]<span class="meta"># tree</span></span><br><span class="line">.</span><br><span class="line">├── build</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">└── src</span><br><span class="line">    ├── CMakeLists.txt</span><br><span class="line">    └── main.cpp</span><br></pre></td></tr></table></figure><p>main.cpp</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;hello.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">HelloFunc</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解决：make后头文件找不到的问题"><a href="#解决：make后头文件找不到的问题" class="headerlink" title="解决：make后头文件找不到的问题"></a>解决：make后头文件找不到的问题</h3><p>PS：include &lt;hello&#x2F;hello.h&gt;  这样include是可以，这么做的话，就没啥好讲的了</p><p>关键字：INCLUDE_DIRECTORIES    这条指令可以用来向工程添加多个特定的头文件搜索路径，路径之间用空格分割</p><p>在CMakeLists.txt中加入头文件搜索路径</p><p>INCLUDE_DIRECTORIES(&#x2F;usr&#x2F;include&#x2F;hello)</p><p>感谢：</p><p>网友：zcc720的提醒</p><h3 id="解决：找到引用的函数问题"><a href="#解决：找到引用的函数问题" class="headerlink" title="解决：找到引用的函数问题"></a>解决：找到引用的函数问题</h3><p>报错信息：undefined reference to &#96;HelloFunc()’</p><p>关键字：LINK_DIRECTORIES     添加非标准的共享库搜索路径</p><p>指定第三方库所在路径，LINK_DIRECTORIES(&#x2F;home&#x2F;myproject&#x2F;libs)</p><p>关键字：TARGET_LINK_LIBRARIES    添加需要链接的共享库</p><p>TARGET_LINK_LIBRARIES的时候，只需要给出动态链接库的名字就行了。</p><p>在CMakeLists.txt中插入链接共享库，主要要插在executable的后面</p><p>查看main的链接情况</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">[root@MiWiFi-R4CM-srv bin]<span class="meta"># ldd main </span></span><br><span class="line">linux-vdso.so<span class="number">.1</span> =&gt;  (<span class="number">0x00007ffedfda4000</span>)</span><br><span class="line">libhello.so =&gt; /lib64/libhello.<span class="built_in">so</span> (<span class="number">0x00007f41c0d8f000</span>)</span><br><span class="line">libstdc++.so<span class="number">.6</span> =&gt; /lib64/libstdc++.so<span class="number">.6</span> (<span class="number">0x00007f41c0874000</span>)</span><br><span class="line">libm.so<span class="number">.6</span> =&gt; /lib64/libm.so<span class="number">.6</span> (<span class="number">0x00007f41c0572000</span>)</span><br><span class="line">libgcc_s.so<span class="number">.1</span> =&gt; /lib64/libgcc_s.so<span class="number">.1</span> (<span class="number">0x00007f41c035c000</span>)</span><br><span class="line">libc.so<span class="number">.6</span> =&gt; /lib64/libc.so<span class="number">.6</span> (<span class="number">0x00007f41bff8e000</span>)</span><br><span class="line">/lib64/ld-linux-x86<span class="number">-64.</span>so<span class="number">.2</span> (<span class="number">0x00007f41c0b7c000</span>)</span><br></pre></td></tr></table></figure><p>链接静态库</p><p><code>TARGET_LINK_LIBRARIES(main libhello.a)</code></p><h3 id="特殊的环境变量-CMAKE-INCLUDE-PATH-和-CMAKE-LIBRARY-PATH"><a href="#特殊的环境变量-CMAKE-INCLUDE-PATH-和-CMAKE-LIBRARY-PATH" class="headerlink" title="特殊的环境变量 CMAKE_INCLUDE_PATH 和 CMAKE_LIBRARY_PATH"></a>特殊的环境变量 CMAKE_INCLUDE_PATH 和 CMAKE_LIBRARY_PATH</h3><p>注意：这两个是环境变量而不是 cmake 变量，可以在linux的bash中进行设置</p><p>我们上面例子中使用了绝对路径INCLUDE_DIRECTORIES(&#x2F;usr&#x2F;include&#x2F;hello)来指明include路径的位置</p><p>我们还可以使用另外一种方式，使用环境变量export CMAKE_INCLUDE_PATH&#x3D;&#x2F;usr&#x2F;include&#x2F;hello</p><p>补充：生产debug版本的方法：<br>cmake .. -DCMAKE_BUILD_TYPE&#x3D;debug</p><p>本站负责转载与修改，源地址 -&gt; <a href="https://www.bilibili.com/video/BV1vR4y1u77h/">Bilibili BV1vR4y1u77h</a>，请大家支持原作者。</p><h1 id="原作者的话："><a href="#原作者的话：" class="headerlink" title="原作者的话："></a>原作者的话：</h1><blockquote><p>本⼈所有视频和笔记都是免费分享给⼤家的，制作视频和笔记要花费⼤量的时间成本</p><p>我也有⽼婆和孩⼦要养，恳求各位观众⽼爷们有经济实⼒的稍微打赏⼀下⼩弟，但不强求，再⼀次感谢。<br>您的打赏，会让我今后有更⼤的动⼒，做出更优质的视频，感谢⼤家的⽀持</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 部长自用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CMake </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Shell</title>
      <link href="/2023/10/13/Linux-Shell/"/>
      <url>/2023/10/13/Linux-Shell/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux-File"><a href="#Linux-File" class="headerlink" title="Linux File"></a>Linux File</h2><p>touch 生成文件</p><p>mkdir 生成文件夹</p><p>rm -rf 删除文件</p><ul><li>*所有文件</li><li>*.?? 所有后缀名为??的文件</li><li>完整文件名+后缀名 指定文件</li></ul><p>ls 列出当前目录下的所有文件以及子文件夹</p><ul><li>-l：显示详细信息；</li><li>-a：显示隐藏文件；</li><li>-h：人性化显示文件大小；</li><li>-t：按时间排序；</li><li>-r：倒序排序；</li><li>-S：按文件大小排序；</li><li>-R：递归显示目录及子目录内容。</li></ul><p>tree 以树形式展示此文件夹下的所有文件和子文件夹</p><h2 id="gcc-x2F-g"><a href="#gcc-x2F-g" class="headerlink" title="gcc&#x2F;g++:"></a>gcc&#x2F;g++:</h2><p>cpp-(预处理)&gt;i-(编译汇编)&gt;s-(二进制机器码)&gt;o-(可执行文件)&gt;exe</p><p>-E-S-c</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc/g++ -E main.cpp -o main.i</span><br><span class="line">gcc/g++ -S main.i -o main.s</span><br><span class="line">gcc -c main.s -o main -lstdc++</span><br><span class="line">g++ -c main.s -o main</span><br><span class="line">=&gt;gcc main.cpp -o main -lstdc++</span><br><span class="line">g++ main.cpp -o main</span><br><span class="line">./main</span><br></pre></td></tr></table></figure><h2 id="分文件编写"><a href="#分文件编写" class="headerlink" title="分文件编写"></a>分文件编写</h2><ul><li><code>main.cpp</code> &#x3D;&gt;<code>#include &lt;add.h&gt;</code> <code>#include &lt;template.h&gt;</code></li><li><code>add.h</code> </li><li><code>add.cpp</code> </li><li><code>template.h&lt;template&gt;</code></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc/g++ -c main.cpp -o main.o</span><br><span class="line">gcc/g++ -c add.cpp -o add.o</span><br><span class="line">gcc main.o add.o -o main -lstdc++</span><br><span class="line">g++ main.o add.o -o main</span><br></pre></td></tr></table></figure><h2 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile:"></a>Makefile:</h2><h3 id="example"><a href="#example" class="headerlink" title="example:"></a>example:</h3><h4 id="directory"><a href="#directory" class="headerlink" title="directory:"></a>directory:</h4><p><code>main.cpp</code>&#x3D;&gt;<code>#include &quot;add.h&quot;</code></p><p><code>add.h</code></p><p><code>add.cpp</code>&#x3D;&gt;<code>#include &quot;add.h&quot;</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> Makefile</span><br></pre></td></tr></table></figure><h4 id="Makefile-1"><a href="#Makefile-1" class="headerlink" title="Makefile"></a>Makefile</h4><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">compile: add_o main_o main</span></span><br><span class="line"></span><br><span class="line"><span class="section">add_o:</span></span><br><span class="line">g++ -c add.cpp -o add.o</span><br><span class="line"></span><br><span class="line"><span class="section">main_o:</span></span><br><span class="line">g++ -c main.cpp -o main.o</span><br><span class="line"></span><br><span class="line"><span class="section">main:</span></span><br><span class="line">g++ main.o add.o -o main</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make默认执行第一条compile</span><br><span class="line">make add_o执行add_o</span><br><span class="line">make add_o main_o执行add_o与main_o</span><br></pre></td></tr></table></figure><h2 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h2><ul><li>a: 编辑模式</li><li>ESC: 退出编辑模式</li><li>:q!: 强制退出不保存</li><li>:q: 退出提示保存</li><li>:w: 保存</li><li>:wq: 保存并退出</li></ul>]]></content>
      
      
      <categories>
          
          <category> 部长自用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript强化</title>
      <link href="/2023/10/13/%E5%89%8D%E7%AB%AF%E5%B0%8F%E7%BB%84%E7%AC%AC%E4%B8%89%E6%AC%A1%E5%9F%B9%E8%AE%AD/"/>
      <url>/2023/10/13/%E5%89%8D%E7%AB%AF%E5%B0%8F%E7%BB%84%E7%AC%AC%E4%B8%89%E6%AC%A1%E5%9F%B9%E8%AE%AD/</url>
      
        <content type="html"><![CDATA[<p>前端小组第三次培训2023&#x2F;11&#x2F;4</p><h1 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h1><p><code>JavaScript</code>不同于<code>Python</code>语言，它有<strong>括号</strong>，每行语句后要加<strong>分号</strong>。</p><p><em><strong>注：所有的符号一律用英文格式的符号，中文格式的符号会报错</strong></em></p><p>如下是实现相同功能两者代码的区别：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bubble_sort</span>(<span class="params">nums: <span class="built_in">list</span>[<span class="built_in">int</span>]</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(nums)</span><br><span class="line">    <span class="comment"># 外循环：未排序区间为 [0, i]</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># 内循环：将未排序区间 [0, i] 中的最大元素交换至该区间的最右端</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">            <span class="keyword">if</span> nums[j] &gt; nums[j + <span class="number">1</span>]:</span><br><span class="line">                <span class="comment"># 交换 nums[j] 与 nums[j + 1]</span></span><br><span class="line">                nums[j], nums[j + <span class="number">1</span>] = nums[j + <span class="number">1</span>], nums[j]</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bubbleSort</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="comment">// 外循环：未排序区间为 [0, i]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = nums.<span class="property">length</span> - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="comment">// 内循环：将未排序区间 [0, i] 中的最大元素交换至该区间的最右端</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[j] &gt; nums[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="comment">// 交换 nums[j] 与 nums[j + 1]</span></span><br><span class="line">                <span class="keyword">let</span> tmp = nums[j];</span><br><span class="line">                nums[j] = nums[j + <span class="number">1</span>];</span><br><span class="line">                nums[j + <span class="number">1</span>] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Python</code>主要靠缩进来控制代码结构和作用域，<code>JavaScript</code>则通过<strong>大括号</strong><code>&#123;&#125;</code>控制。</p><p>对于括号，如<code>()</code> <code>[]</code> <code>&#123;&#125;</code>，都要<strong>成对出现</strong>。不然会报语法错误。</p><h1 id="代码块与作用域"><a href="#代码块与作用域" class="headerlink" title="{}代码块与作用域"></a>{}代码块与作用域</h1><p>每个变量&#x2F;常量都有其<strong>作用域</strong>与<strong>生命周期</strong></p><h2 id="页面全局变量"><a href="#页面全局变量" class="headerlink" title="页面全局变量"></a>页面全局变量</h2><p>页面全局变量即在页面函数<code>Page()</code>中传入的<code>页面对象</code>中的<code>data对象</code>中的变量，它们的<code>作用域</code>为<code>当前页面</code>，也就是说<code>只能</code>在本页面中可以访问到，除非将其作为<code>页面参数</code>传递到下一页面，<code>生命周期</code>伴随此页面的生成与销毁（切换跳转到另一个页面并不算页面的销毁，页面的切换与跳转依靠栈实现，所有的数据仍在<code>栈</code>中）。</p><p>关于<code>Page()</code>函数该传入什么参数，详见开发文档<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html">框架接口 &#x2F; 页面 &#x2F; Page (qq.com)</a></p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">num</span>: <span class="number">7410</span>,</span><br><span class="line">        <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">str</span>: <span class="string">&quot;A string.&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">voidfunc</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h3><p>代码中，函数<code>Page()</code>中<code>()</code>包裹的<code>&#123;&#125;</code>即为<code>页面对象</code>，<code>页面对象</code>包含了页面全局变量<code>data对象</code>与名为<code>voidfunc</code>的空函数，各字段用<code>,</code>隔开，<code>data对象</code>中包含了名为<code>num</code>值为<code>7410</code>、名为<code>count</code>值为<code>0</code>、名为<code>str</code>值为<code>A string.</code>的三个页面全局变量，且各字段用<code>,</code>隔开。</p><h2 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h2><p>在<code>函数代码块</code>中声明的变量我们称其为<code>局部变量</code>，局部变量的<code>生命周期</code>由<code>声明方式</code>决定，<code>作用域</code>由<code>代码块&#123;&#125;</code>决定。</p><h3 id="函数体"><a href="#函数体" class="headerlink" title="函数体"></a>函数体</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>(<span class="params"></span>) &#123;<span class="comment">//此&#123;&#125;内即为函数体</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="var与let"><a href="#var与let" class="headerlink" title="var与let"></a>var与let</h3><p>由<code>var</code>关键字声明的变量在<code>本函数体内</code>可见。</p><p>由<code>let</code>关键字声明的变量在<code>本代码块</code>，即<code>&#123;&#125;内</code>可见。</p><h4 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">10</span>;<span class="comment">//a=10，本代码块&#123;&#125;内可见，由于此级&#123;&#125;是函数体，所以此处var与let等效</span></span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">20</span>;<span class="comment">//b=20，本函数体内可见</span></span><br><span class="line">    <span class="keyword">if</span> (b === <span class="number">20</span>) &#123;<span class="comment">//如果b等于20，执行if内的代码块&#123;&#125;</span></span><br><span class="line">        <span class="keyword">let</span> c = <span class="number">30</span>;<span class="comment">//c=30，本代码块内可见，即if代码块&#123;&#125;</span></span><br><span class="line">        <span class="keyword">var</span> d = <span class="number">40</span>;<span class="comment">//d=40，本函数体内可见</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a);<span class="comment">//控制台打印a</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(b);<span class="comment">//控制台打印b</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(d);<span class="comment">//控制台打印d</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(c);<span class="comment">//控制台打印c</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">40</span></span><br><span class="line"><span class="title class_">WAServiceMainContext</span>.<span class="property">js</span>:<span class="number">2</span> <span class="title class_">ReferenceError</span>: c is not defined</span><br><span class="line">    at <span class="title class_">Br</span>.<span class="property">func</span> (index.<span class="property">js</span>:<span class="number">14</span>)</span><br><span class="line">    at <span class="title class_">Object</span>.<span class="property">r</span>.<span class="property">safeCallback</span> (<span class="title class_">WASubContext</span>.<span class="property">js</span>?t=wechat&amp;s=<span class="number">1698412746305</span>&amp;v=<span class="number">2.19</span><span class="number">.4</span>:<span class="number">2</span>)</span><br><span class="line">    at <span class="title class_">WASubContext</span>.<span class="property">js</span>?t=wechat&amp;s=<span class="number">1698412746305</span>&amp;v=<span class="number">2.19</span><span class="number">.4</span>:<span class="number">2</span></span><br><span class="line">    at wn (<span class="title class_">WASubContext</span>.<span class="property">js</span>?t=wechat&amp;s=<span class="number">1698412746305</span>&amp;v=<span class="number">2.19</span><span class="number">.4</span>:<span class="number">2</span>)</span><br><span class="line">    at <span class="title class_">WASubContext</span>.<span class="property">js</span>?t=wechat&amp;s=<span class="number">1698412746305</span>&amp;v=<span class="number">2.19</span><span class="number">.4</span>:<span class="number">2</span></span><br><span class="line">    at g (<span class="title class_">WASubContext</span>.<span class="property">js</span>?t=wechat&amp;s=<span class="number">1698412746305</span>&amp;v=<span class="number">2.19</span><span class="number">.4</span>:<span class="number">2</span>)</span><br><span class="line">    at <span class="title class_">WASubContext</span>.<span class="property">js</span>?t=wechat&amp;s=<span class="number">1698412746305</span>&amp;v=<span class="number">2.19</span><span class="number">.4</span>:<span class="number">2</span></span><br><span class="line">    at <span class="title class_">WASubContext</span>.<span class="property">js</span>?t=wechat&amp;s=<span class="number">1698412746305</span>&amp;v=<span class="number">2.19</span><span class="number">.4</span>:<span class="number">2</span></span><br><span class="line">    at <span class="title class_">WAServiceMainContext</span>.<span class="property">js</span>:<span class="number">2</span></span><br><span class="line">    at s (<span class="title class_">VM9</span> asdebug.<span class="property">js</span>:<span class="number">1</span>)(<span class="attr">env</span>: <span class="title class_">Windows</span>,mp,<span class="number">1.06</span><span class="number">.2308310</span>; <span class="attr">lib</span>: <span class="number">2.19</span><span class="number">.4</span>)</span><br></pre></td></tr></table></figure><p>打印a、b、d正常，但打印c报错（引用错误，c未定义），因为<code>let</code>关键字声明的变量只在if后的<code>&#123;&#125;内可见</code>，且生命周期<code>只在&#123;&#125;内</code>。</p><p>同时，<code>上级代码块&#123;&#125;</code>中声明的变量在<code>下级代码块&#123;&#125;</code>中<code>可见</code>，上述代码中<code>if代码块</code>中仍可打印a、b。</p><h1 id="对象（Object）"><a href="#对象（Object）" class="headerlink" title="对象（Object）"></a>对象（Object）</h1><p>对象的概念详见<a href="https://www.whaleghost.top/2023/10/07/%E5%89%8D%E7%AB%AF%E5%B0%8F%E7%BB%84%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%9F%B9%E8%AE%AD/">JS入门与函数、数据绑定 | whaleghostの小窝</a>的对象部分，此处不再赘述。</p><p>对象由<code>&#123;&#125;</code>进行包裹，但此处的<code>&#123;&#125;</code>并不算代码块，代码块一般指<code>函数/方法中的&#123;&#125;</code>。</p><p>对象内包含若干<code>字段</code>，字段后接<code>:</code>其后跟<code>值or函数/方法</code>，且每个字段<code>声明结束</code>后都要加<code>,</code>。</p><h2 id="示例代码-2"><a href="#示例代码-2" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;<span class="comment">//匿名对象</span></span><br><span class="line">    <span class="attr">data</span>: &#123;<span class="comment">//data字段声明为一个对象</span></span><br><span class="line">        <span class="attr">vari</span>: <span class="number">1</span>,<span class="comment">//data对象内vari字段声明结束，接逗号“,”</span></span><br><span class="line">        <span class="attr">tof</span>: <span class="literal">true</span>,<span class="comment">//data对象内tof字段声明结束，接逗号“,”</span></span><br><span class="line">        <span class="attr">txt</span>: <span class="string">&quot;HHH&quot;</span><span class="comment">//对象最后一个字段不需要接逗号“,”</span></span><br><span class="line">    &#125;,<span class="comment">//data字段声明结束，接逗号“,”</span></span><br><span class="line">    <span class="attr">createObj</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;<span class="comment">//createObj字段声明为一个函数/方法</span></span><br><span class="line">        <span class="keyword">var</span> student = &#123;<span class="comment">//声明一个名为student的局部对象</span></span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,<span class="comment">//student对象内name字段声明结束，接逗号“,”</span></span><br><span class="line">            <span class="attr">age</span>: <span class="number">19</span>,<span class="comment">//student对象内age字段声明结束，接逗号“,”</span></span><br><span class="line">            <span class="attr">grow</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;<span class="comment">//student对象内name字段声明为一个函数/方法</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">age</span> = <span class="variable language_">this</span>.<span class="property">age</span>+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="comment">//对象最后一个字段不需要接逗号“,”</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="comment">//对象最后一个字段不需要接逗号“,”</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="this—当前对象的引用"><a href="#this—当前对象的引用" class="headerlink" title="this—当前对象的引用"></a>this—当前对象的引用</h2><h1 id="数组（Array）的基本操作"><a href="#数组（Array）的基本操作" class="headerlink" title="数组（Array）的基本操作"></a>数组（Array）的基本操作</h1><p>数组的概念详见<a href="https://www.whaleghost.top/2023/10/07/%E5%89%8D%E7%AB%AF%E5%B0%8F%E7%BB%84%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%9F%B9%E8%AE%AD/">JS入门与函数、数据绑定 | whaleghostの小窝</a>的数组部分，此处不再赘述。</p><p>数组由<code>[]</code>包裹，各个元素间用<code>,</code>隔开。</p><h2 id="数组元素访问"><a href="#数组元素访问" class="headerlink" title="数组元素访问"></a>数组元素访问</h2><p>数组的<code>下标</code>从<code>0</code>开始，0表示第1个元素，1表示第2个元素，以此类推。</p><table><thead><tr><th>下标</th><th>位序</th></tr></thead><tbody><tr><td>0</td><td>1</td></tr><tr><td>1</td><td>2</td></tr><tr><td>2</td><td>3</td></tr><tr><td>3</td><td>4</td></tr><tr><td>4</td><td>5</td></tr></tbody></table><p>如果要访问第2个元素，则参考以下代码</p><h3 id="示例代码-3"><a href="#示例代码-3" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="string">&quot;Bonjour&quot;</span>,<span class="number">5</span>,<span class="literal">true</span>,<span class="number">3.14</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">1</span>]);<span class="comment">//控制台打印arr数组的第二个元素</span></span><br></pre></td></tr></table></figure><h3 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Bonjour</span></span><br></pre></td></tr></table></figure><h2 id="常见内置函数-x2F-方法"><a href="#常见内置函数-x2F-方法" class="headerlink" title="常见内置函数&#x2F;方法"></a>常见内置函数&#x2F;方法</h2><h3 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h3><p>将一个或多个元素添加到数组的末尾，并返回新数组的长度。</p><h4 id="示例代码-4"><a href="#示例代码-4" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">5</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br></pre></td></tr></table></figure><h4 id="运行结果-2"><a href="#运行结果-2" class="headerlink" title="运行结果"></a>运行结果</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure><h3 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h3><p>删除数组的最后一个元素，并返回被删除的元素。</p><h4 id="示例代码-5"><a href="#示例代码-5" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">arr.<span class="title function_">pop</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br></pre></td></tr></table></figure><h4 id="运行结果-3"><a href="#运行结果-3" class="headerlink" title="运行结果"></a>运行结果</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure><h3 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h3><p>将一个或多个元素添加到数组的开头，并返回新数组的长度。</p><p><em><strong>注：不推荐使用，时间复杂度为O(n)，性能开销极大。</strong></em></p><h4 id="示例代码-6"><a href="#示例代码-6" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">arr.<span class="title function_">unshift</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br></pre></td></tr></table></figure><h4 id="运行结果-4"><a href="#运行结果-4" class="headerlink" title="运行结果"></a>运行结果</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure><h3 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h3><p>删除数组的第一个元素，并返回被删除的元素。</p><p><em><strong>注：不推荐使用，时间复杂度为O(n)，性能开销极大。</strong></em></p><h4 id="示例代码-7"><a href="#示例代码-7" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">arr.<span class="title function_">shift</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br></pre></td></tr></table></figure><h4 id="运行结果-5"><a href="#运行结果-5" class="headerlink" title="运行结果"></a>运行结果</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 培训文件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS入门与函数、数据绑定</title>
      <link href="/2023/10/07/%E5%89%8D%E7%AB%AF%E5%B0%8F%E7%BB%84%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%9F%B9%E8%AE%AD/"/>
      <url>/2023/10/07/%E5%89%8D%E7%AB%AF%E5%B0%8F%E7%BB%84%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%9F%B9%E8%AE%AD/</url>
      
        <content type="html"><![CDATA[<p>前端小组第二次培训2023&#x2F;10&#x2F;7</p><h1 id="JavaScript为弱类型语言，包含以下基本数据类型"><a href="#JavaScript为弱类型语言，包含以下基本数据类型" class="headerlink" title="JavaScript为弱类型语言，包含以下基本数据类型"></a>JavaScript为弱类型语言，包含以下基本数据类型</h1><h2 id="Number（数字类型）"><a href="#Number（数字类型）" class="headerlink" title="Number（数字类型）"></a><strong>Number（数字类型）</strong></h2><p>表示数字，可以是整数或浮点数。</p><h2 id="String（字符串类型）"><a href="#String（字符串类型）" class="headerlink" title="String（字符串类型）"></a><strong>String（字符串类型）</strong></h2><p>表示文本数据，可以使用单引号<code>&#39; &#39;</code>或双引号<code>&quot; &quot;</code>括起来。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str1 = <span class="string">&quot;Hello!&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">&quot;Hola!&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="Boolean（布尔类型）"><a href="#Boolean（布尔类型）" class="headerlink" title="Boolean（布尔类型）"></a><strong>Boolean（布尔类型）</strong></h2><p>表示真或假的值。</p><h2 id="Null（空类型）"><a href="#Null（空类型）" class="headerlink" title="Null（空类型）"></a>Null（空类型）</h2><p>表示一个空值。</p><h2 id="Undefined（未定义类型）"><a href="#Undefined（未定义类型）" class="headerlink" title="Undefined（未定义类型）"></a>Undefined（未定义类型）</h2><p>表示一个未定义的值。</p><h2 id="Array（数组）"><a href="#Array（数组）" class="headerlink" title="Array（数组）"></a><strong>Array（数组）</strong></h2><p>表示数据集合，可以由相同数据类型或不同数据类型组成，声名时用<code>[]</code>。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">3.14</span>, <span class="literal">true</span>, <span class="string">&quot;STRING&quot;</span>];<span class="comment">//number, number, boolean, string</span></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">2.7</span>, <span class="literal">false</span>, <span class="string">&quot;string&quot;</span>, <span class="number">6</span>, &#123;<span class="attr">name</span>: <span class="string">&quot;John&quot;</span>, <span class="attr">age</span>: <span class="number">19</span>, <span class="attr">married</span>: <span class="literal">false</span>&#125;];<span class="comment">//number, boolean, string, number, object</span></span><br></pre></td></tr></table></figure><h2 id="Object（对象）"><a href="#Object（对象）" class="headerlink" title="Object（对象）"></a><strong>Object（对象）</strong></h2><p>表示由若干数据与函数&#x2F;方法组成的完整个体，声名时用<code>&#123;&#125;</code>。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person1 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Lily&quot;</span>,<span class="comment">//string</span></span><br><span class="line">    <span class="attr">age</span>: <span class="number">19</span>,<span class="comment">//number</span></span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&quot;female&quot;</span>,<span class="comment">//string</span></span><br><span class="line">    <span class="attr">married</span>: <span class="literal">false</span>,<span class="comment">//boolean</span></span><br><span class="line">    <span class="attr">grow</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;<span class="comment">//function/method</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span>++;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">marry</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;<span class="comment">//function/method</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">married</span> = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person2 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Michael&quot;</span>,<span class="comment">//string</span></span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span>,<span class="comment">//number</span></span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&quot;male&quot;</span>,<span class="comment">//string</span></span><br><span class="line">    <span class="attr">married</span>: <span class="literal">false</span>,<span class="comment">//boolean</span></span><br><span class="line">    <span class="attr">grow</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;<span class="comment">//function/method</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span>++;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">marry</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;<span class="comment">//function/method</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">married</span> = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Object-Array（对象数组）"><a href="#Object-Array（对象数组）" class="headerlink" title="Object Array（对象数组）"></a><strong>Object Array（对象数组）</strong></h2><p>数组内的数据为对象。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> object_array1 = [</span><br><span class="line">    &#123;<span class="attr">ID</span>: <span class="string">&quot;1&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;高等数学&quot;</span>, <span class="attr">grade</span>: <span class="number">90</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">ID</span>: <span class="string">&quot;2&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;线性代数&quot;</span>, <span class="attr">grade</span>: <span class="number">87</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">ID</span>: <span class="string">&quot;3&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;程序设计&quot;</span>, <span class="attr">grade</span>: <span class="number">93</span>&#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">var</span> object_array2 = [</span><br><span class="line">    &#123;<span class="attr">ID</span>: <span class="string">&quot;1&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;离散数学&quot;</span>, <span class="attr">grade</span>: <span class="number">80</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">ID</span>: <span class="string">&quot;2&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;计算机组成原理&quot;</span>, <span class="attr">grade</span>: <span class="number">83</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">ID</span>: <span class="string">&quot;3&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;数据结构&quot;</span>, <span class="attr">grade</span>: <span class="number">96</span>&#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>以上为局部变量声明方法↑</p><hr><p>以下为全局变量声明方法↓</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;<span class="comment">//Page()为内置的页面函数&#123;&#125;以及其中的内容为传入其中的参数，为一个对象，内包含data全局变量对象和其他函数，共同构成一个对象，所以data与其他函数需用逗号(,)分割，Page(&#123;&#125;)基本是死写法</span></span><br><span class="line">    <span class="attr">data</span>: &#123;<span class="comment">//data本质上也是一个对象</span></span><br><span class="line">        <span class="attr">str</span>: <span class="string">&quot;This is a string.&quot;</span>,<span class="comment">//string</span></span><br><span class="line">        <span class="attr">num</span>: <span class="number">60</span>,<span class="comment">//number</span></span><br><span class="line">        <span class="attr">bool</span>: <span class="literal">true</span>,<span class="comment">//boolean</span></span><br><span class="line">        <span class="attr">arr</span>: [<span class="number">1</span>,<span class="string">&quot;?!&quot;</span>,<span class="literal">false</span>],<span class="comment">//array</span></span><br><span class="line">        <span class="attr">obj</span>: &#123;<span class="comment">//object</span></span><br><span class="line">            <span class="attr">id</span>: <span class="number">1032</span>,</span><br><span class="line">            <span class="attr">value</span>: <span class="string">&quot;芝士雪豹&quot;</span>,</span><br><span class="line">            <span class="attr">accessible</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>局部变量用<code>=</code>，全局变量用<code>:</code>。</strong></p><h1 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h1><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">func1</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;<span class="comment">//方式1，推荐，函数名为func1</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;func1 called&quot;</span>);<span class="comment">//控制台输出，()内为要在控制台输出的内容</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">func2</span>(<span class="params"></span>) &#123;<span class="comment">//方式2，函数名为func2</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;func2 called&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="插值表达式"><a href="#插值表达式" class="headerlink" title="插值表达式"></a>插值表达式</h1><p>插值表达式是将逻辑层的数据在渲染层上渲染出的一种形式。</p><p><code>&#123;&#123;&#125;&#125;</code>即为插值表达式，两个大括号中间加入你要渲染的<code>data</code>对象中的数据。</p><h2 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;str&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">str</span>: <span class="string">&quot;Hello world!&quot;</span>,</span><br><span class="line">        <span class="attr">num</span>: <span class="number">123456</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="函数绑定"><a href="#函数绑定" class="headerlink" title="函数绑定"></a>函数绑定</h1><p><code>bind:tap=&quot;&quot;</code></p><p>bind:tap意为点击触发，&#x3D;“”双引号内写入你想要执行的函数名。</p><h2 id="示例代码-2"><a href="#示例代码-2" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">bind:tap</span>=<span class="string">&quot;func&quot;</span>&gt;</span>点击触发名为func的函数<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bind:tap</span>=<span class="string">&quot;press&quot;</span>&gt;</span>点击触发名为press的函数<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">func</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;名为func的函数已执行&quot;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">press</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;名为press的函数已执行&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h1><p>要访问data对象中的数据，需要以<code>this.data.变量名</code>的形式进行访问。</p><h2 id="仅逻辑层修改"><a href="#仅逻辑层修改" class="headerlink" title="仅逻辑层修改"></a>仅逻辑层修改</h2><p>如果目标变量并没有渲染到渲染层中，可以直接用<code>this.data.变量名</code>进行修改。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">data</span>.变量名 = 值;<span class="comment">//this即Page(&#123;&#125;)内的&#123;&#125;对象，其又有data对象，我们需要的是data对象中的某个变量</span></span><br></pre></td></tr></table></figure><h2 id="逻辑层-渲染层修改"><a href="#逻辑层-渲染层修改" class="headerlink" title="逻辑层+渲染层修改"></a>逻辑层+渲染层修改</h2><p>逻辑层+渲染层修改需要用到setData()方法，以告知渲染层逻辑层数据发生更改，渲染层作出相应的更改。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;<span class="comment">//&#123;&#125;内是对象</span></span><br><span class="line">    变量<span class="number">1</span>: 值,</span><br><span class="line">    变量<span class="number">2</span>: 值,</span><br><span class="line">    变量<span class="number">3</span>: 值</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="示例代码-3"><a href="#示例代码-3" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;num1&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;num2&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bind:tap</span>=<span class="string">&quot;changeNum&quot;</span>&gt;</span>点击将num1修改为20,num2修改为30<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bind:tap</span>=<span class="string">&quot;changeData&quot;</span>&gt;</span>点击将逻辑层字符串str修改为hola<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">num1</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="attr">num2</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">str</span>: <span class="string">&quot;hello&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">changeNum</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//num1与num2以插值表达式引入到了HTML中进行渲染，所以必须使用setData()函数才能使页面上展示的数据也一起变化</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">            <span class="attr">num1</span>: <span class="number">20</span>,</span><br><span class="line">            <span class="attr">num2</span>: <span class="number">30</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">num1</span>);<span class="comment">//控制台输出当前num1</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">num2</span>);<span class="comment">//控制台输出当前num2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">changeData</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">str</span> = <span class="string">&quot;hola&quot;</span>;<span class="comment">//由于str并没有在渲染层HTML中展示，所以可以直接修改</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">str</span>);<span class="comment">//控制台输出当前str</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><a href="https://pan.baidu.com/s/1pXvGxOJSxBXiLrdt-Z2V0Q?pwd=4c2x">👉(戳我下载资料)👈</a></p><p>可配合百度网盘不限速帖子食用👉<a href="https://www.whaleghost.top/2023/07/09/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E4%B8%8D%E9%99%90%E9%80%9F/">百度网盘不限速 | whaleghostの小窝</a></p>]]></content>
      
      
      <categories>
          
          <category> 培训文件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML+CSS基础</title>
      <link href="/2023/09/24/%E5%89%8D%E7%AB%AF%E5%B0%8F%E7%BB%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%9F%B9%E8%AE%AD/"/>
      <url>/2023/09/24/%E5%89%8D%E7%AB%AF%E5%B0%8F%E7%BB%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%9F%B9%E8%AE%AD/</url>
      
        <content type="html"><![CDATA[<p>前端小组第一次培训2023&#x2F;9&#x2F;24</p><h1 id="单双标签组件与CSS引入"><a href="#单双标签组件与CSS引入" class="headerlink" title="单双标签组件与CSS引入"></a>单双标签组件与CSS引入</h1><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p>HTML（超文本标记语言）是用于创建网页结构的标记语言。通过HTML，开发者可以定义网页的标题、段落、链接、图像等元素，以及它们的布局和样式。</p><h3 id="双标签组件"><a href="#双标签组件" class="headerlink" title="双标签组件"></a>双标签组件</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>双标签组件，即使用时必须成对出现，每有一个<code>&lt;组件名&gt;</code>出现必须出现一个<code>&lt;/组件名&gt;</code>与其对应。两标签间一般夹有内容进行使用。</p><p>注意单标签与双标签<code>/</code>的出现位置，注意区分。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">组件名</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">组件名</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="text组件"><a href="#text组件" class="headerlink" title="text组件"></a>text组件</h4><p>text组件用以渲染文本，在text的双标签中间加入渲染的目标内容。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">text</span>&gt;</span>在此加入文本<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其他组件属性详见开发文档👉<a href="https://developers.weixin.qq.com/miniprogram/dev/component/text.html">基础内容 &#x2F; text (qq.com)</a></p><h4 id="view组件"><a href="#view组件" class="headerlink" title="view组件"></a>view组件</h4><p>view组件即视图容器，它同样可以完成渲染文本的任务，但就实际开发而言，一般不用于渲染文本，而是用于嵌套使用，将多个组件包裹，构成一个整体，以便于进行CSS属性的应用。</p><p>如下是简单的示例代码。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span>一个整体<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span>view组件用以渲染文本<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;https://s1.imagehub.cc/images/2023/08/10/wallhaven-zyxvqy.jpeg&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">&quot;数字输入框&quot;</span> <span class="attr">type</span>=<span class="string">&quot;digit&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如下是实际开发中view组件的应用情况</p><p>注意：以下示例代码给出的并不是微信原生框架，而是Vue框架，与微信原生框架语法有所不同。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;selector&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">picker</span> @<span class="attr">change</span>=<span class="string">&quot;bindPickerChange&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;index&quot;</span> <span class="attr">:range</span>=<span class="string">&quot;subjectnum&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span>&gt;</span>请选择科目数量<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;picker&quot;</span>&gt;</span>当前选择：&#123;&#123;index&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">picker</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;subjectinfo.length &gt; 0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;head&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span>&gt;</span>科目<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span>&gt;</span>学分<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span>&gt;</span>成绩<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;form-cell&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in subjectinfo&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;name&quot;</span>&gt;</span>&#123;&#123;item.subject&#125;&#125;&#123;&#123;index+1&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;credit&quot;</span> <span class="attr">type</span>=<span class="string">&quot;digit&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入学分&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;confirmCredit&quot;</span> <span class="attr">:data-index</span>=<span class="string">&quot;index&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;grade&quot;</span> <span class="attr">type</span>=<span class="string">&quot;digit&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入成绩&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;confirmGrade&quot;</span> <span class="attr">:data-index</span>=<span class="string">&quot;index&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;result&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;subjectinfo.length &gt; 0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;cal&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;cal&quot;</span>&gt;</span>计算<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span>您的绩点为:&#123;&#123;result&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;gap&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">    由天财网协技术部提供</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其他组件属性详见开发文档👉<a href="https://developers.weixin.qq.com/miniprogram/dev/component/view.html">视图容器 &#x2F; view (qq.com)</a></p><h3 id="单标签组件"><a href="#单标签组件" class="headerlink" title="单标签组件"></a>单标签组件</h3><h4 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h4><p>单标签组件，即<code>&lt;组件名/&gt;</code>使用时不必成对出现，组件后也不必跟随内容的组件，单标签已足以实现其功能。</p><p>注意单标签与双标签<code>/</code>的出现位置，注意区分。</p><h4 id="input组件"><a href="#input组件" class="headerlink" title="input组件"></a>input组件</h4><p>input组件用以渲染输入框，较为常用的组件属性为placeholder，type，可与JavaScript配合使用记录输入内容。</p><p>如下是input组件配合JavaScript记录输入内容的代码。(JS部分有兴趣的同学可以了解，不做硬性要求)</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- bindinput为在用户进行输入操作时执行方法func --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">&quot;文本输入框&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">bindinput</span>=<span class="string">&quot;func&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">content</span>: <span class="string">&quot;&quot;</span><span class="comment">//声明名为content内容为空的字符串类型页面全局变量</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">func</span>: <span class="keyword">function</span>(<span class="params">e</span>) &#123;<span class="comment">//记录输入事件对象e</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e);<span class="comment">//不知道事件对象e的内容可进行控制台打印寻找需要的属性值</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">content</span> = e.<span class="property">detail</span>.<span class="property">value</span>;<span class="comment">//不需要做渲染层内容更新，不需要this.setData()</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>其他组件属性详见开发文档👉<a href="https://developers.weixin.qq.com/miniprogram/dev/component/input.html">表单组件 &#x2F; input (qq.com)</a></p><h4 id="image组件"><a href="#image组件" class="headerlink" title="image组件"></a>image组件</h4><p>image组件用以渲染图片资源，支持 JPG、PNG、SVG、WEBP、GIF 等格式，较为常用的组件属性为<code>src</code>，<code>mode</code>，图片来源可以是本地也可以是在线图片(图床)，渲染本地图片资源时要使用<a href="https://blog.csdn.net/qq_59358228/article/details/127384109">相对路径</a>进行引用。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 本地资源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;../../images/image1.png&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;widthFix&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在线资源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;https://s1.imagehub.cc/images/2023/08/10/wallhaven-zyxvqy.jpeg&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;aspectFill&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>其他组件属性详见开发文档👉<a href="https://developers.weixin.qq.com/miniprogram/dev/component/image.html">媒体组件 &#x2F; image (qq.com)</a></p><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><p>CSS（层叠样式表）是用于设置网页样式和布局的样式表语言。通过CSS，开发者可以控制网页元素的颜色、大小、位置、字体等外观效果，实现网页的美化和排版。</p><h3 id="CSS的内联引入"><a href="#CSS的内联引入" class="headerlink" title="CSS的内联引入"></a>CSS的内联引入</h3><p>内联引入即在组件标签内添加<code>style</code>属性，<code>style=&quot;属性1: 属性值; 属性2: 属性值; 属性3: 属性值;&quot;</code>。</p><p>示例代码如下</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 将Hi here.文本颜色改为绿色，字体大小为10像素，text组件背景颜色改为洋红色 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 颜色可用预设的常用颜色英文，也可用16进制颜色码表示(更精确) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">style</span>=<span class="string">&quot;color: green; font-size: 10px; background-color: #FF00FF&quot;</span>&gt;</span>Hi here.<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="CSS选择器引入"><a href="#CSS选择器引入" class="headerlink" title="CSS选择器引入"></a>CSS选择器引入</h3><p>选择器引入需要指定组件<code>class</code>名，<code>class=&quot;name&quot;</code>，注意此处的class不应与C++等面向对象语言中的class混淆，此处的class更像是为组件起了一个别名方便指定CSS属性。</p><p>示例代码如下</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;module&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;txt&quot;</span>&gt;</span>文本1<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span>文本2<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*指定名为module的组件采用弹性布局，方向为纵向*/</span></span><br><span class="line"><span class="selector-class">.module</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*指定名为txt的组件颜色改为红色*/</span></span><br><span class="line"><span class="selector-class">.txt</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*指定名为module的组件下的所有view组件背景颜色为绿色*/</span></span><br><span class="line"><span class="selector-class">.module</span> view &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优先级问题"><a href="#优先级问题" class="headerlink" title="优先级问题"></a>优先级问题</h3><p>关于两种方式同时使用时且指定相同属性但值却不同的问题</p><p>结论：内联方式的优先级最高。</p><p>示例代码如下</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 最终text组件的文本颜色为绿色，背景颜色为黄绿色 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;txt&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span>This is a string.<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.txt</span> &#123;</span><br><span class="line">    <span class="comment">/*color属性将以内联属性为准而忽略color: green*/</span></span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">    <span class="comment">/*内联未指定background-color，所以background-color: #EAF161;仍然生效*/</span></span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#EAF161</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://pan.baidu.com/s/11i9bsLgPkXyxd1jFNB0yRQ?pwd=gtib">👉(戳我下载资料)👈</a></p><p>可配合百度网盘不限速帖子食用👉<a href="https://www.whaleghost.top/2023/07/09/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E4%B8%8D%E9%99%90%E9%80%9F/">百度网盘不限速 | whaleghostの小窝</a></p>]]></content>
      
      
      <categories>
          
          <category> 培训文件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Office</title>
      <link href="/2023/07/15/office/"/>
      <url>/2023/07/15/office/</url>
      
        <content type="html"><![CDATA[<p>本帖适用于Office全家桶批量版的激活。</p><p>如果你购买的笔记本的包装盒上没有标注附带Office的信息，说明笔记本不带有Office激活信息，需要通过一些特殊手段来对Office进行激活。同样也适用于台式机Office的激活。</p><h2 id="下载工具"><a href="#下载工具" class="headerlink" title="下载工具"></a>下载工具</h2><p>本帖所用的工具为<strong>Office Tool Plus</strong>，前往<a href="https://pan.baidu.com/s/1qSbWOlVUgfvTlpW_jLqAbw?pwd=ythm">https://pan.baidu.com/s/1qSbWOlVUgfvTlpW_jLqAbw?pwd&#x3D;ythm</a>进行下载。没有百度网盘会员又想不限速的请先移步至<a href="https://www.whaleghost.top/2023/07/09/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E4%B8%8D%E9%99%90%E9%80%9F/">百度网盘不限速 | whaleghost的小窝</a>。</p><p>下载完毕后进行解压得到文件夹</p><p><img src="https://s1.imagehub.cc/images/2023/08/14/-2023-08-14-152703.png"></p><p>进入<code>Office Tool</code>文件夹，运行<code>Office Tool Plus.exe</code>（<em>注意：若提示更新请忽略更新，否则会导致与本教程不匹配且大概率识别不到自带的.NET运行环境</em>）。</p><h2 id="卸载自带的Office（确定没有自带Office的请移至第3步）"><a href="#卸载自带的Office（确定没有自带Office的请移至第3步）" class="headerlink" title="卸载自带的Office（确定没有自带Office的请移至第3步）"></a>卸载自带的Office（确定没有自带Office的请移至第3步）</h2><p>启动<code>Office Tool Plus.exe</code>后，进入<code>工具箱</code>界面（包括下文所提到的界面都是点击左上角的三条横杠以查看界面名称），选择<code>移除Office</code>并勾选<code>清除激活状态</code>，并<code>开始</code>，等待操作完成即可。</p><p><img src="https://s1.imagehub.cc/images/2023/08/14/-2023-08-14-153211.png"></p><h2 id="部署Office"><a href="#部署Office" class="headerlink" title="部署Office"></a>部署Office</h2><p>进入<code>部署</code>界面，由于我已安装了Office专业增强版2019所以会在这里显示。</p><p><img src="https://s1.imagehub.cc/images/2023/08/14/-2023-08-14-153535.png"></p><ol><li>点击<code>添加产品</code>（<em>注意：一定要选择带有批量许可证后缀的版本，不然可能会出现激活失败的情况，且一定是Office而不能是Word、Publisher这样的单品</em>），选择你想要安装的Office版本。</li><li>选择好后继续选择下一栏<code>应用程序</code>，勾选你会用到的Office软件（如果你不知道选哪些，默认勾选Word，PowerPoint和Excel即可）。</li><li>然后在右边栏里调整<code>部署设置</code>，体系结构默认<code>64位</code>，通道选择与你选择的版本号相同的通道，如果没有的话选择一个可以使用的即可（选择了不适用的会报错）。</li><li>剩下的参数按照图片中来即可。</li><li>点击右上角<code>开始部署</code>，进行安装。</li></ol><h2 id="安装许可证并激活"><a href="#安装许可证并激活" class="headerlink" title="安装许可证并激活"></a>安装许可证并激活</h2><ol><li><p>进入激活界面，在<code>许可证管理</code>栏里选择与你安装的Office版本完全一致的许可证，然后<code>安装许可证</code>。</p><p><img src="https://s1.imagehub.cc/images/2023/08/14/-2023-08-14-155350.png"></p></li><li><p>等待安装操作完毕后，进入<code>KMS管理</code>一栏，准备填写<code>KMS主机地址</code>。<img src="https://s1.imagehub.cc/images/2023/08/14/-2023-08-14-160001.png"></p></li><li><p>打开解压得到的文件夹下的<code>KMS.txt</code>，内包含了多个KMS主机地址，选择一个填入即可（旁边标注err的是KMS主机截至编写博客时故障并不可用的KMS服务器，也可以尝试但大概率不能用），<code>KMS端口</code>留空即可。<img src="https://s1.imagehub.cc/images/2023/08/14/-2023-08-14-155823.png"></p></li><li><p>保存设置并点击右上角的<code>激活</code>，等待右侧<code>操作结果</code>栏出现成功提示。</p></li><li><p>提示成功则本帖内容到此结束。若不成功，可以尝试换一个KMS主机地址或移除Office并选择另一个版本，并按本教程再来一次。若自己实在无法解决，可等待网协义诊寻求帮助或单独找<a href="/about/">博客主</a>寻求帮助。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 资源分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> office </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Code</title>
      <link href="/2023/07/14/Code/"/>
      <url>/2023/07/14/Code/</url>
      
        <content type="html"><![CDATA[<h2 id="培训源码2023-x2F-7-x2F-15"><a href="#培训源码2023-x2F-7-x2F-15" class="headerlink" title="培训源码2023&#x2F;7&#x2F;15"></a>培训源码2023&#x2F;7&#x2F;15</h2><span id="more"></span><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;body&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;selector&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">picker</span> @<span class="attr">change</span>=<span class="string">&quot;bindPickerChange&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;index&quot;</span> <span class="attr">:range</span>=<span class="string">&quot;subjectnum&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>请选择科目数量<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;picker&quot;</span>&gt;</span>当前选择：&#123;&#123;index&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">picker</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;subjectinfo.length &gt; 0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;head&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>科目<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>学分<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>成绩<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;form-cell&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in subjectinfo&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;name&quot;</span>&gt;</span>&#123;&#123;item.subject&#125;&#125;&#123;&#123;index+1&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;credit&quot;</span> <span class="attr">type</span>=<span class="string">&quot;digit&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入学分&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;confirmCredit&quot;</span> <span class="attr">:data-index</span>=<span class="string">&quot;index&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;grade&quot;</span> <span class="attr">type</span>=<span class="string">&quot;digit&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入成绩&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;confirmGrade&quot;</span> <span class="attr">:data-index</span>=<span class="string">&quot;index&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;result&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;subjectinfo.length &gt; 0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;cal&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;cal&quot;</span>&gt;</span>计算<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>您的绩点为:&#123;&#123;result&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">subjectnum</span>: [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>],</span><br><span class="line"><span class="attr">index</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">subjectinfo</span>: [],</span><br><span class="line"><span class="attr">result</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line"><span class="title function_">bindPickerChange</span>(<span class="params">e</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="title class_">Number</span>(<span class="variable language_">this</span>.<span class="property">index</span>) &gt; <span class="title class_">Number</span>(e.<span class="property">detail</span>.<span class="property">value</span>)) &#123;</span><br><span class="line"><span class="keyword">var</span> count = <span class="variable language_">this</span>.<span class="property">index</span> - e.<span class="property">detail</span>.<span class="property">value</span>;</span><br><span class="line"><span class="keyword">var</span> temp = <span class="variable language_">this</span>.<span class="property">subjectinfo</span>.<span class="title function_">slice</span>(); <span class="comment">// 创建一个数组副本</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">temp.<span class="title function_">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">subjectinfo</span> = temp;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title class_">Number</span>(<span class="variable language_">this</span>.<span class="property">index</span>) &lt; <span class="title class_">Number</span>(e.<span class="property">detail</span>.<span class="property">value</span>)) &#123;</span><br><span class="line"><span class="keyword">var</span> count = e.<span class="property">detail</span>.<span class="property">value</span>-<span class="variable language_">this</span>.<span class="property">index</span></span><br><span class="line"><span class="keyword">var</span> temp = <span class="variable language_">this</span>.<span class="property">subjectinfo</span>.<span class="title function_">slice</span>()</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; count;i++) &#123;</span><br><span class="line">temp.<span class="title function_">push</span>(&#123;</span><br><span class="line"><span class="attr">subject</span>: <span class="string">&quot;科目&quot;</span>,</span><br><span class="line"><span class="attr">credit</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">grade</span>: <span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">subjectinfo</span> = temp</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">index</span> = e.<span class="property">detail</span>.<span class="property">value</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">result</span> = <span class="number">0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">subjectinfo</span>) </span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="title function_">confirmCredit</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subjectinfo</span>[e.<span class="property">currentTarget</span>.<span class="property">dataset</span>.<span class="property">index</span>].<span class="property">credit</span> = e.<span class="property">detail</span>.<span class="property">value</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">subjectinfo</span>)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="title function_">confirmGrade</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subjectinfo</span>[e.<span class="property">currentTarget</span>.<span class="property">dataset</span>.<span class="property">index</span>].<span class="property">grade</span> = e.<span class="property">detail</span>.<span class="property">value</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">subjectinfo</span>)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="title function_">cal</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> t = <span class="variable language_">this</span>.<span class="property">subjectinfo</span></span><br><span class="line">    <span class="keyword">var</span> sumc = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="variable language_">this</span>.<span class="property">index</span>;i++) &#123;</span><br><span class="line">sumc+=<span class="title class_">Number</span>(t[i].<span class="property">credit</span>)</span><br><span class="line">sum+=<span class="title class_">Number</span>(t[i].<span class="property">credit</span>)*(<span class="number">4</span>-<span class="number">3</span>*(<span class="number">100</span>-<span class="title class_">Number</span>(t[i].<span class="property">grade</span>))*(<span class="number">100</span>-<span class="title class_">Number</span>(t[i].<span class="property">grade</span>))/<span class="number">1600</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> result = sum/sumc</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">result</span> = result</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-class">.body</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#000000</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.selector</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">20</span>rpx;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">40%</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">30</span>rpx;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.selector</span> view &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">15</span>rpx;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">15</span>rpx;</span><br><span class="line">  <span class="attribute">border</span>: white solid <span class="number">4</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.head</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.1</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">20</span>rpx;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">30</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">70</span>rpx;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">90%</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.form-cell</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.1</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">20</span>rpx;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">30</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">70</span>rpx;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">90%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.name</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">60%</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.credit</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.grade</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.input-placeholder</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.result</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">60</span>rpx;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.1</span>);</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20</span>rpx;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">20</span>rpx;</span><br><span class="line">  <span class="attribute">font-size</span>: larger;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cal</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">70</span>rpx;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">70</span>rpx;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">10</span>rpx;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">10</span>rpx;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.1</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">15</span>rpx;</span><br><span class="line">  <span class="attribute">border</span>: white solid <span class="number">5</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 培训文件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JetBrains全家桶激活工具</title>
      <link href="/2023/07/12/JetBrains%E5%85%A8%E5%AE%B6%E6%A1%B6%E6%BF%80%E6%B4%BB%E5%B7%A5%E5%85%B7/"/>
      <url>/2023/07/12/JetBrains%E5%85%A8%E5%AE%B6%E6%A1%B6%E6%BF%80%E6%B4%BB%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="本帖的工具适用于所有的JetBrains开发IDE，如CLion、IntelliJ-IDEA、WebStorm、PyCharm等（最新产品Fleet除外）"><a href="#本帖的工具适用于所有的JetBrains开发IDE，如CLion、IntelliJ-IDEA、WebStorm、PyCharm等（最新产品Fleet除外）" class="headerlink" title="本帖的工具适用于所有的JetBrains开发IDE，如CLion、IntelliJ IDEA、WebStorm、PyCharm等（最新产品Fleet除外）"></a>本帖的工具适用于所有的JetBrains开发IDE，如CLion、IntelliJ IDEA、WebStorm、PyCharm等（最新产品Fleet除外）</h2><h3 id="戳我下载工具"><a href="#戳我下载工具" class="headerlink" title="戳我下载工具"></a><a href="https://pan.baidu.com/s/1_5N4iKJLN6hv9SMXc1rWaQ?pwd=i2y4">戳我下载工具</a></h3><span id="more"></span><hr><h2 id="注意：由于工具属于破解脚本，请务必在安装时关闭所有杀毒软件（包括Microsoft-Defender安全中心）以防误报毒被查杀"><a href="#注意：由于工具属于破解脚本，请务必在安装时关闭所有杀毒软件（包括Microsoft-Defender安全中心）以防误报毒被查杀" class="headerlink" title="注意：由于工具属于破解脚本，请务必在安装时关闭所有杀毒软件（包括Microsoft Defender安全中心）以防误报毒被查杀"></a>注意：由于工具属于破解脚本，请务必在安装时关闭所有杀毒软件（包括Microsoft Defender安全中心）以防误报毒被查杀</h2><p><strong>也可将此工具添加为排除项</strong></p><hr><h2 id="警告：本工具在进行教程的第3步后的文件路径不能再改变，否则会出现掉激活需要重新激活的清空"><a href="#警告：本工具在进行教程的第3步后的文件路径不能再改变，否则会出现掉激活需要重新激活的清空" class="headerlink" title="警告：本工具在进行教程的第3步后的文件路径不能再改变，否则会出现掉激活需要重新激活的清空"></a>警告：本工具在进行教程的第3步后的文件路径不能再改变，否则会出现掉激活需要重新激活的清空</h2><hr><h2 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h2><ol><li>首先下载工具，可与(<a href="https://whaleghost.github.io/2023/07/09/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E4%B8%8D%E9%99%90%E9%80%9F/">百度网盘不限速 | whaleghost的小窝</a>)配合使用，工具下载链接👉<a href="https://pan.baidu.com/s/1_5N4iKJLN6hv9SMXc1rWaQ?pwd=i2y4">戳我下载工具</a></li><li>下载完毕后进行解压可得到<img src="https://s1.imagehub.cc/images/2023/08/09/imgaa55855157f2ce30f.png" alt="imgaa55855157f2ce30f.png"></li><li>打开<code>scripts</code>文件夹<img src="https://s1.imagehub.cc/images/2023/08/09/imgb15925fe6cb6b61b5.png" alt="imgb15925fe6cb6b61b5.png">如果是windows系统，直接运行<code>install-current-user.vbs</code>会弹出<img src="https://s1.imagehub.cc/images/2023/08/09/imgce543d2f61a540d10.png" alt="imgce543d2f61a540d10.png">点击OK并耐心等待Done提示出现即可<img src="https://s1.imagehub.cc/images/2023/08/09/imgd2b54e3167db27f92.png" alt="imgd2b54e3167db27f92.png">如果是MacOS直接运行<code>install.sh</code>，其他步骤同windows</li><li>打开你要激活的JetBrains开发IDE</li><li>点击<code>Get license from:</code>下的<code>License sever</code>，并将<code>https://jetbra.in</code>填入其中，最后点击<code>Activate</code>，若激活成功则此教程至此结束，否则继续往下看</li><li>点击右侧链接👉<a href="https://jetbra.in/5d84466e31722979266057664941a71893322460">没错就是我</a>进入网站<img src="https://s1.imagehub.cc/images/2023/08/09/imged14b071c9a64f771.png" alt="imged14b071c9a64f771.png">并选择一个能访问到的网站进入（忽略危险提示即可)</li><li>选择对应的你要激活的JetBrains开发IDE下的<code>Copy to clipboard</code>点击，出现<code>Copied</code>后回到<code>Get license from:</code>下的<code>Activation Code</code>并粘贴，最后点击<code>Activate</code></li><li>若还不成功，亦可联系<a href="https://www.whaleghost.top/about">博客主</a>帮忙解决</li></ol>]]></content>
      
      
      <categories>
          
          <category> 资源分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JetBrains </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用软件资源分享</title>
      <link href="/2023/07/10/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB/"/>
      <url>/2023/07/10/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="NOTICE："><a href="#NOTICE：" class="headerlink" title="NOTICE："></a><strong>NOTICE：</strong></h1><p>如果想要的资源不在清单内可联系<a href="https://whaleghost.github.io/about">博客主</a>添加或去资源公众号查找</p><p>此帖建议与百度网盘不限速配合使用 (<a href="https://whaleghost.github.io/2023/07/09/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E4%B8%8D%E9%99%90%E9%80%9F/">百度网盘不限速 | whaleghost的小窝</a>)</p><p>资源来自微信公众号：肉肉软件安装</p><span id="more"></span><hr><h2 id="重要的事情说三遍"><a href="#重要的事情说三遍" class="headerlink" title="重要的事情说三遍"></a>重要的事情说三遍</h2><h2 id="解压密码统一为yiliu！！！"><a href="#解压密码统一为yiliu！！！" class="headerlink" title="解压密码统一为yiliu！！！"></a>解压密码统一为yiliu！！！</h2><h2 id="解压密码统一为yiliu！！！-1"><a href="#解压密码统一为yiliu！！！-1" class="headerlink" title="解压密码统一为yiliu！！！"></a>解压密码统一为yiliu！！！</h2><h2 id="解压密码统一为yiliu！！！-2"><a href="#解压密码统一为yiliu！！！-2" class="headerlink" title="解压密码统一为yiliu！！！"></a>解压密码统一为yiliu！！！</h2><hr><h1 id="导航："><a href="#导航：" class="headerlink" title="导航："></a>导航：</h1><ol><li><a href="#xmind"><strong>XMind</strong></a></li><li><a href="#bandizip"><strong>Bandizip</strong></a></li><li><a href="#3dsmax"><strong>3D Studio Max（3dsMAX）</strong></a></li><li><a href="#ps"><strong>Adobe Photoshop（PS）</strong></a></li><li><a href="#pr"><strong>Adobe Premire Pro（PR）</strong></a></li><li><a href="#ae"><strong>Adobe After Effects（AE）</strong></a></li><li><a href="#ai"><strong>Adobe Illustrator（AI）</strong></a></li><li><a href="#cad"><strong>Autodesk AutoCAD</strong></a></li><li><a href="#matlab"><strong>Matlab</strong></a></li></ol><hr><h1 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h1><h2 id="XMind"><a href="#XMind" class="headerlink" title="XMind"></a><a name="xmind">XMind</a></h2><p><a href="https://pan.baidu.com/s/1a1Rc67VDoS_AG1I2R4Vm6g?pwd=n5dt">XMind2022</a></p><p><a href="https://pan.baidu.com/s/10lY5CPWW4XOum7Me7fkruA?pwd=mbim">XMind2021</a></p><h3 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h3><p>1.鼠标右击【XMind2022(64bit)】压缩包(win11系统需先点击“显示更多选项”)选择【解压到 XMind2022(64bit)】。</p><p><img src="https://s1.imagehub.cc/images/2023/08/09/xminda.png" alt="xminda.png"></p><p>2.进入解压好的 【Xmind 2022 安装包】 安装包文件夹内，找到后缀为.exe的文件。</p><p><img src="https://s1.imagehub.cc/images/2023/08/09/xmindb.png" alt="xmindb.png"></p><p>3.双击或者选中【Set-up】右键管理员身份运行。</p><p><img src="https://s1.imagehub.cc/images/2023/08/09/xmindc.png" alt="xmindc.png"></p><p>4.安装很快完成，可以点继续或者右上角的叉，退出安装界面。</p><p><img src="https://s1.imagehub.cc/images/2023/08/09/xmindd.png" alt="xmindd.png"></p><p>5.打开安装包解压后的【XMind2022(64bit)】文件夹，鼠标右击【app.asar】选择【复制】。</p><p><img src="https://s1.imagehub.cc/images/2023/08/09/xminde.png" alt="xminde.png"></p><p>6.鼠标右击桌面【Xmind】图标选择【打开文件所在的位置】。</p><p><img src="https://s1.imagehub.cc/images/2023/08/09/xmindf.png" alt="xmindf.png"></p><p>7.双击打开【resources】文件夹。</p><p><img src="https://s1.imagehub.cc/images/2023/08/09/xmindg.png" alt="xmindg.png"></p><p>8.进入文件夹后，CTRL+V粘贴到该文件夹内，弹出是否替换目标文件对话框，点击替换目标中的文件。</p><p><img src="https://s1.imagehub.cc/images/2023/08/09/xmindh.png" alt="xmindh.png"></p><p>9.点击：【继续】。</p><p><img src="https://s1.imagehub.cc/images/2023/08/09/xmindi.png" alt="xmindi.png"></p><p>10.打开解压后的文件夹，鼠标右击【hosts】选择【以管理员身份运行】(运行即可，软件会自动退出)。</p><p><img src="https://s1.imagehub.cc/images/2023/08/09/xmindj.png" alt="xmindj.png"></p><p>11.双击桌面【Xmind】图标启动软件。</p><p><img src="https://s1.imagehub.cc/images/2023/08/09/xmindk.png" alt="xmindk.png"></p><p>12.取消勾选【自动发送……】，点击【同意】。</p><p><img src="https://s1.imagehub.cc/images/2023/08/09/xmindl.png" alt="xmindl.png"></p><p>13.点击【跳过】。</p><p><img src="https://s1.imagehub.cc/images/2023/08/09/xmindm.png" alt="xmindm.png"></p><p>14.取消勾选【自动安装以后的更新】，点击【忽略本次更新】。</p><p><img src="https://s1.imagehub.cc/images/2023/08/09/xmindn.png" alt="xmindn.png"></p><p>15.进入软件后，进行禁止自动更新设置(非常重要，软件一旦更新将无法使用)：①点击菜单栏中【三】②点击【首选项】③下拉框选择【关闭自动更新】④点击【应用】。</p><p><img src="https://s1.imagehub.cc/images/2023/08/09/xmindo.png" alt="xmindo.png"></p><p>16.安装成功。</p><p><img src="https://s1.imagehub.cc/images/2023/08/09/xmindp.png" alt="xmindp.png"></p><h2 id="Bandizip"><a href="#Bandizip" class="headerlink" title="Bandizip"></a><a name="bandizip">Bandizip</a></h2><p><a href="https://pan.baidu.com/s/1P9nphr2K3Afr1nwPkKDLrQ?pwd=jz38">Bandizip</a></p><h3 id="教程-1"><a href="#教程-1" class="headerlink" title="教程"></a>教程</h3><p><img src="https://s1.imagehub.cc/images/2023/08/09/bandizip.jpeg" alt="bandizip.jpeg"></p><h2 id="3D-Studio-Max（3dsMAX）"><a href="#3D-Studio-Max（3dsMAX）" class="headerlink" title="3D Studio Max（3dsMAX）"></a><a name="3dsmax">3D Studio Max（3dsMAX）</a></h2><p><a href="https://pan.baidu.com/s/1L3neClc8jhxsYhhmPNorqA?pwd=cyaq">3D Studio Max 2017</a></p><p><a href="https://pan.baidu.com/s/1MxviBiAkkiDobVi3K6dRYw?pwd=tnh4">3D Studio Max 2022</a></p><h3 id="教程-2"><a href="#教程-2" class="headerlink" title="教程"></a>教程</h3><p><em>注意：由于注册机的特殊性，请务必在安装时关闭所有杀毒软件（包括Microsoft Defender安全中心）以防误报毒被查杀</em></p><h4 id="3D-Studio-Max-2017"><a href="#3D-Studio-Max-2017" class="headerlink" title="3D Studio Max 2017"></a>3D Studio Max 2017</h4><p><img src="https://s1.imagehub.cc/images/2023/08/09/3dsmax17a.jpeg" alt="3dsmax17a.jpeg"></p><p><img src="https://s1.imagehub.cc/images/2023/08/09/3dsmax17b.jpeg" alt="3dsmax17b.jpeg"></p><h4 id="3D-Studio-Max-2022"><a href="#3D-Studio-Max-2022" class="headerlink" title="3D Studio Max 2022"></a>3D Studio Max 2022</h4><p><img src="https://s1.imagehub.cc/images/2023/08/09/3dsmax22.png" alt="3dsmax22.png"></p><h2 id="Adobe-Photoshop（PS）"><a href="#Adobe-Photoshop（PS）" class="headerlink" title="Adobe Photoshop（PS）"></a><a name="ps">Adobe Photoshop（PS）</a></h2><p><a href="https://pan.baidu.com/s/1TsdM8J6bEbKGHZkd-uxv1Q?pwd=u79w">Adobe Photoshop 2019</a></p><p><a href="https://pan.baidu.com/s/1k3mC8qX5mkdGy4bnhR1KCw?pwd=iyve">Adobe Photoshop 2022</a></p><p><a href="https://pan.baidu.com/s/1bE685XUPCTczWPNBzF9SAg?pwd=6vst">Adobe Photoshop 2023</a></p><h3 id="教程-3"><a href="#教程-3" class="headerlink" title="教程"></a>教程</h3><p><code>解压</code>👉<code>Set-up.exe</code>👉按步骤指引来</p><h2 id="Adobe-Premiere-Pro（PR）"><a href="#Adobe-Premiere-Pro（PR）" class="headerlink" title="Adobe Premiere Pro（PR）"></a><a name="pr">Adobe Premiere Pro（PR）</a></h2><p><a href="https://pan.baidu.com/s/14aJOkjux67hDzRn5u3yH2w?pwd=44yy">Adobe Premiere Pro 2019</a></p><p><a href="https://pan.baidu.com/s/1qGzyT5k4LsueemG4DgmLzQ?pwd=pb06">Adobe Premiere Pro 2022</a></p><p><a href="https://pan.baidu.com/s/1yyXWNSW6HXgPx2DYkQ5I7Q?pwd=vu3f">Adobe Premiere Pro 2023</a></p><h3 id="教程-4"><a href="#教程-4" class="headerlink" title="教程"></a>教程</h3><p><code>解压</code>👉<code>Set-up.exe</code>👉按步骤指引来</p><h2 id="Adobe-After-Effects（AE）"><a href="#Adobe-After-Effects（AE）" class="headerlink" title="Adobe After Effects（AE）"></a><a name="ae">Adobe After Effects（AE）</a></h2><p><a href="https://pan.baidu.com/s/14IaSaVf7IMZ3ss_dYOo4-w?pwd=n8m2">Adobe After Effects 2019</a></p><p><a href="https://pan.baidu.com/s/1VybGln3MfC-I2FZudf5nyw?pwd=fysl">Adobe After Effects 2022</a></p><p><a href="https://pan.baidu.com/s/1gINknJwtrP59mwUEfceRRA?pwd=263i">Adobe After Effects 2023</a></p><h3 id="教程-5"><a href="#教程-5" class="headerlink" title="教程"></a>教程</h3><p><code>解压</code>👉<code>Set-up.exe</code>👉按步骤指引来</p><h2 id="Adobe-Illustrator（AI）"><a href="#Adobe-Illustrator（AI）" class="headerlink" title="Adobe Illustrator（AI）"></a><a name="ai">Adobe Illustrator（AI）</a></h2><p><a href="https://pan.baidu.com/s/1JhYngiHtQv_se-TNHEJk-Q?pwd=2b9u">Adobe Illustrator 2019</a></p><p><a href="https://pan.baidu.com/s/1eAt4tvLgCrCVMZ6-i3_fpw?pwd=zhau">Adobe Illustrator 2022</a></p><p><a href="https://pan.baidu.com/s/1Y_-WL6uNBLpPk4E2jzTrZw?pwd=0ewd">Adobe Illustrator 2023</a></p><h3 id="教程-6"><a href="#教程-6" class="headerlink" title="教程"></a>教程</h3><p><code>解压</code>👉<code>Set-up.exe</code>👉按步骤指引来</p><h2 id="Autodesk-AutoCAD"><a href="#Autodesk-AutoCAD" class="headerlink" title="Autodesk AutoCAD"></a><a name="cad">Autodesk AutoCAD</a></h2><p><a href="https://pan.baidu.com/s/1E3PjQmdHrlokol_MizYAOg?pwd=08vs">Autodesk AutoCAD 2019</a></p><p><a href="https://pan.baidu.com/s/1Xmw0l_7mGBV1WQ7BP3y5SA?pwd=epk1">Autodesk AutoCAD 2022</a></p><p><a href="https://pan.baidu.com/s/1cbpOFRwaOY8HUqyJr4Bqkg?pwd=8zj2">Autodesk AutoCAD 2023</a></p><h3 id="教程-7"><a href="#教程-7" class="headerlink" title="教程"></a>教程</h3><p><em>注意：由于注册机的特殊性，请务必在安装时关闭所有杀毒软件（包括Microsoft Defender安全中心）以防误报毒被查杀</em></p><h4 id="Autodesk-AutoCAD-2019"><a href="#Autodesk-AutoCAD-2019" class="headerlink" title="Autodesk AutoCAD 2019"></a>Autodesk AutoCAD 2019</h4><p><img src="https://s1.imagehub.cc/images/2023/08/09/cad19a.jpeg" alt="cad19a.jpeg"></p><p><img src="https://s1.imagehub.cc/images/2023/08/09/cad19b.jpeg" alt="cad19b.jpeg"></p><h4 id="Autodesk-AutoCAD-2022"><a href="#Autodesk-AutoCAD-2022" class="headerlink" title="Autodesk AutoCAD 2022"></a>Autodesk AutoCAD 2022</h4><p><img src="https://s1.imagehub.cc/images/2023/08/09/cad22.png" alt="cad22.png"></p><h4 id="Autodesk-AutoCAD-2023"><a href="#Autodesk-AutoCAD-2023" class="headerlink" title="Autodesk AutoCAD 2023"></a>Autodesk AutoCAD 2023</h4><p><img src="https://s1.imagehub.cc/images/2023/08/09/cad23.png" alt="cad23.png"></p><h2 id="Matlab"><a href="#Matlab" class="headerlink" title="Matlab"></a><a name="matlab">Matlab</a></h2><p><a href="https://pan.baidu.com/s/1m00WgsJs0oZ8Zmvvlevi-w?pwd=zx69">Matlab R2022a</a></p><p><a href="https://pan.baidu.com/s/1cB_duF5czeq3xRShetw4og?pwd=if7l">Matlab R2022b</a></p><p><a href="https://pan.baidu.com/s/1PIny4vKz0h8f5oGCUzl_Yg?pwd=dbud">Matlab R2023a</a>(教程暂空缺)</p><h3 id="教程-8"><a href="#教程-8" class="headerlink" title="教程"></a>教程</h3><h4 id="Matlab-R2022a"><a href="#Matlab-R2022a" class="headerlink" title="Matlab R2022a"></a>Matlab R2022a</h4><p><img src="https://s1.imagehub.cc/images/2023/08/09/mata.png" alt="mata.png"></p><h4 id="Matlab-R2022b"><a href="#Matlab-R2022b" class="headerlink" title="Matlab R2022b"></a>Matlab R2022b</h4><p><img src="https://s1.imagehub.cc/images/2023/08/09/matb.png" alt="matb.png"></p>]]></content>
      
      
      <categories>
          
          <category> 资源分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>百度网盘不限速</title>
      <link href="/2023/07/09/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E4%B8%8D%E9%99%90%E9%80%9F/"/>
      <url>/2023/07/09/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E4%B8%8D%E9%99%90%E9%80%9F/</url>
      
        <content type="html"><![CDATA[<p>天下苦百度网盘久矣！</p><span id="more"></span><blockquote><p>你的这个事啊，我们讲，不是说，不是说不办，但是呢。没有说啊，没有任何一件事情我们谈说，说一定怎么怎么样，说不行吧它也不是，我们讲，事在人为啊，我们可以，办法，啊可以想办法。</p></blockquote><h2 id="Edge"><a href="#Edge" class="headerlink" title="Edge"></a>Edge</h2><ul><li>首先点击右上角 <code>...</code> ，然后点击<code>扩展</code></li></ul><p><img src="https://s1.imagehub.cc/images/2023/08/09/imga005ff58269d81cc8.png" alt="imga005ff58269d81cc8.png"></p><ul><li>再点击<code>管理扩展</code>，进入扩展管理页面</li></ul><p><img src="https://s1.imagehub.cc/images/2023/08/09/imgb1f9fb15f612e4808.png" alt="imgb1f9fb15f612e4808.png"></p><ul><li>点击获取<code>Microsoft Edge扩展</code></li></ul><p><img src="https://s1.imagehub.cc/images/2023/08/09/imgcbfb7323b6e6de6bd.png" alt="imgcbfb7323b6e6de6bd.png"></p><ul><li>搜索<code>Tampermonkey</code>安装并启用<img src="https://s1.imagehub.cc/images/2023/08/09/imgd8750ac139c698981.png" alt="imgd8750ac139c698981.png"></li></ul><p><a href="https://greasyfork.org/zh-CN/scripts/463171-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E5%8D%83%E5%8D%83%E4%B8%8B%E8%BD%BD%E5%8A%A9%E6%89%8B">百度网盘千千下载助手 (greasyfork.org)</a></p><p>👆点击链接下载并安装脚本</p><h2 id="百度网盘千千下载助手"><a href="#百度网盘千千下载助手" class="headerlink" title="百度网盘千千下载助手"></a>百度网盘千千下载助手</h2><p>一个纯净好用的百度网盘下载助手，绝无多余附加功能。免SVIP会员，免安装浏览器扩展，无视黑号，只要你有个IDM或Aria2，就能享受极速下载的快感！</p><p><img src="https://s1.imagehub.cc/images/2023/08/09/imge052da1af81b17acf.png" alt="imge052da1af81b17acf.png"></p><hr><p>脚本支持2种下载方式：IDM和Aria2<br><strong>IDM下载：</strong>注意IDM必须设置4线程及修改UA为“<strong>netdisk</strong>”，设置教程：&gt;&gt;&gt; <a href="http://h.qianqian.club/bd/jc/jc.html#idm">点击查看IDM设置</a> &lt;&lt;&lt;<br>**Aria2下载：**Aria2无需配置即可使用：&gt;&gt;&gt; <a href="https://softxm.lanzouw.com/ibnUa0tlao1g">点击下载Aria2</a> &lt;&lt;&lt;</p><hr><p><strong>【使用步骤】</strong><br>1、安装脚本，在百度网盘就可以看到红色按钮【千千下载助手】<br>　　如果看不到按钮，很有可能跟其它脚本冲突了，你可以尝试停用其它脚本<br>2、勾选1个文件，点击红色按钮【千千下载助手】，弹出下载窗口，然后在窗口上点击按钮【点击获取直链地址】<br>3、待获取直链地址成功后，你可以选择2种下载方式：<br>1）复制直链地址：复制后就可以到IDM中新建下载任务了<br>2）发送至Aria2：点击后直接发送至Aria2中进行下载</p><p>详细使用步骤，请参考脚本作者写的教程： &gt;&gt;&gt; <a href="http://h.qianqian.club/bd/jc/jc.html">点击查看使用教程</a> &lt;&lt;&lt;（可能有点卡）</p><hr><p><strong>【脚本取直链原理】</strong><br>脚本将你的文件分享（随机加密，1天过期）–&gt;服务器读取分享文件的直链地址–&gt;服务端返回直链地址给你<br><em>作者的服务器不保存你的分享文件</em><br><em>也不会收集任何用户敏感信息</em></p><p><strong>【脚本不足】</strong><br>1、仅支持单文件下载（不支持文件夹及批量下载）<br>2、不支持违规文件（即 不支持无法分享的文件）</p>]]></content>
      
      
      <categories>
          
          <category> 资源分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器主页推荐</title>
      <link href="/2023/07/08/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%BB%E9%A1%B5%E6%8E%A8%E8%8D%90/"/>
      <url>/2023/07/08/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%BB%E9%A1%B5%E6%8E%A8%E8%8D%90/</url>
      
        <content type="html"><![CDATA[<h1 id="浏览器主页推荐"><a href="#浏览器主页推荐" class="headerlink" title="浏览器主页推荐"></a>浏览器主页推荐</h1><hr><h2 id="青柠起始页"><a href="#青柠起始页" class="headerlink" title="青柠起始页"></a>青柠起始页</h2><p><a href="https://limestart.cn/">青柠起始页</a> 由毛若昕和杨尚臻开发，是一个简洁、美观、实用的浏览器起始页。青柠起始页以最简洁的界面容纳了多引擎搜索、自定义网站捷径、便笺等实用功能；您可依据喜好对青柠起始页进行高度自定义，让您的网上冲浪体验更加舒心。</p><span id="more"></span><p>青柠起始页十分符合当前大众的审美，简洁明了，相较于360主页、2345主页等众多主页，青柠起始页没有任何广告，你不会时不时就看见一些广告，你更不会看见那些随处可见的营销号推送。</p><p><img src="https://s1.imagehub.cc/images/2023/08/09/imga.png" alt="imga.png"></p><p>这是青柠起始页的主页，简洁大方，干净。没有任何你会觉得不舒服的地方。</p><p><img src="https://s1.imagehub.cc/images/2023/08/09/imgb.png" alt="imgb.png"></p><p>搜索栏干净，不会有任何广告。而且下面可以自由切换搜索引擎。同时也支持自己添加搜索引擎。鼠标点击搜索栏后下方会显示“一言”，也就是随机一句名言，每次打开都会改变。你可以将它添加到便签。</p><p><img src="https://s1.imagehub.cc/images/2023/08/09/imgc.png" alt="imgc.png"></p><p>在空白界面鼠标右击或点击时钟可以进入到二级界面。这里同样没有任何广告。左下角是当地的天气。右下角是对当前壁纸的喜欢按钮（该功能仅支持勾选背景图像为必应时才会出现）。中间前两行是预设捷径，单击就可以进入到对应的网站。第三行及以后是自定义捷径。可以无限制添加。滚动鼠标滚轮会进入到便签界面。你可以在这里管理自己的便签，以及刚刚添加的一言。同样便签也支持无限次添加。便签可以云同步，只需要登陆你的账户。</p><p>你可以将便签固定，无论你在什么界面，都会存在。</p><p><img src="https://s1.imagehub.cc/images/2023/08/09/imgd.png" alt="imgd.png"></p><p>同时青柠起始页还拥有丰富的自定义选项。点击右上角的的齿轮进入设置可以自由更改。包含暗黑模式，自定义效果，主题颜色等多种选项，也可以修改、自定义背景图像，还可以更改搜索引擎。</p><h2 id="如何使用青柠起始页"><a href="#如何使用青柠起始页" class="headerlink" title="如何使用青柠起始页"></a>如何使用青柠起始页</h2><h3 id="直接设置主页路径"><a href="#直接设置主页路径" class="headerlink" title="直接设置主页路径"></a>直接设置主页路径</h3><p><img src="https://s1.imagehub.cc/images/2023/08/09/imge.png" alt="imge.png"></p><h3 id="安装青柠起始页扩展"><a href="#安装青柠起始页扩展" class="headerlink" title="安装青柠起始页扩展"></a>安装青柠起始页扩展</h3><p><img src="https://s1.imagehub.cc/images/2023/08/09/imgf.png" alt="imgf.png"></p><p>点击安装扩展，按照指引安装扩展程序即可</p>]]></content>
      
      
      <categories>
          
          <category> 资源分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客终于搭好了</title>
      <link href="/2023/07/08/%E5%8D%9A%E5%AE%A2%E7%BB%88%E4%BA%8E%E6%90%AD%E5%A5%BD%E4%BA%86/"/>
      <url>/2023/07/08/%E5%8D%9A%E5%AE%A2%E7%BB%88%E4%BA%8E%E6%90%AD%E5%A5%BD%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<p>历经几个小时的煎熬终于搭好了博客（泪目）。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
